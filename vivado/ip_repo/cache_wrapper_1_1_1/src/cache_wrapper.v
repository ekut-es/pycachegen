/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post100, git sha1 a1bb0255d) */

(* top =  1  *)
(* generator = "Amaranth" *)
module CacheWrapper(fe_0__write_data, fe_0__write_strobe, fe_0__request_valid, fe_0__flush, clk, rst, fe_0__read_data, fe_0__read_data_valid, fe_0__port_ready, hit_o_0, fe_0__address);
  wire [7:0] be__address;
  wire be__flush;
  wire be__port_ready;
  wire [31:0] be__read_data;
  wire be__read_data_valid;
  wire be__request_valid;
  wire [31:0] be__write_data;
  wire [3:0] be__write_strobe;
  input clk;
  wire clk;
  input [7:0] fe_0__address;
  wire [7:0] fe_0__address;
  input fe_0__flush;
  wire fe_0__flush;
  output fe_0__port_ready;
  wire fe_0__port_ready;
  output [31:0] fe_0__read_data;
  wire [31:0] fe_0__read_data;
  output fe_0__read_data_valid;
  wire fe_0__read_data_valid;
  input fe_0__request_valid;
  wire fe_0__request_valid;
  input [31:0] fe_0__write_data;
  wire [31:0] fe_0__write_data;
  input [3:0] fe_0__write_strobe;
  wire [3:0] fe_0__write_strobe;
  wire [7:0] fe__address;
  wire [7:0] \fe__address$20 ;
  wire fe__flush;
  wire \fe__flush$22 ;
  wire fe__port_ready;
  wire \fe__port_ready$25 ;
  wire [31:0] fe__read_data;
  wire [31:0] \fe__read_data$27 ;
  wire fe__read_data_valid;
  wire \fe__read_data_valid$29 ;
  wire fe__request_valid;
  wire \fe__request_valid$30 ;
  wire [31:0] fe__write_data;
  wire [31:0] \fe__write_data$32 ;
  wire [3:0] fe__write_strobe;
  wire [3:0] \fe__write_strobe$34 ;
  wire hit_o;
  output hit_o_0;
  wire hit_o_0;
  input rst;
  wire rst;
  \CacheWrapper.l1_cache  l1_cache (
    .be__address(\fe__address$20 ),
    .be__flush(\fe__flush$22 ),
    .be__port_ready(be__port_ready),
    .be__read_data(be__read_data),
    .be__request_valid(\fe__request_valid$30 ),
    .be__write_data(\fe__write_data$32 ),
    .be__write_strobe(\fe__write_strobe$34 ),
    .clk(clk),
    .fe__address(fe_0__address),
    .fe__flush(fe_0__flush),
    .fe__port_ready(fe_0__port_ready),
    .fe__read_data(fe_0__read_data),
    .fe__read_data_valid(fe_0__read_data_valid),
    .fe__request_valid(fe_0__request_valid),
    .fe__write_data(fe_0__write_data),
    .fe__write_strobe(fe_0__write_strobe),
    .hit_o(hit_o_0),
    .rst(rst)
  );
  \CacheWrapper.main_memory  main_memory (
    .clk(clk),
    .fe__address(\fe__address$20 ),
    .fe__port_ready(be__port_ready),
    .fe__read_data(be__read_data),
    .fe__read_data_valid(be__read_data_valid),
    .fe__request_valid(\fe__request_valid$30 ),
    .fe__write_data(\fe__write_data$32 ),
    .fe__write_strobe(\fe__write_strobe$34 ),
    .rst(rst)
  );
  assign hit_o = hit_o_0;
  assign fe__address = fe_0__address;
  assign fe__flush = fe_0__flush;
  assign fe__port_ready = fe_0__port_ready;
  assign fe__read_data = fe_0__read_data;
  assign fe__read_data_valid = fe_0__read_data_valid;
  assign fe__request_valid = fe_0__request_valid;
  assign fe__write_data = fe_0__write_data;
  assign fe__write_strobe = fe_0__write_strobe;
  assign be__address = \fe__address$20 ;
  assign be__flush = \fe__flush$22 ;
  assign \fe__port_ready$25  = be__port_ready;
  assign \fe__read_data$27  = be__read_data;
  assign \fe__read_data_valid$29  = be__read_data_valid;
  assign be__request_valid = \fe__request_valid$30 ;
  assign be__write_data = \fe__write_data$32 ;
  assign be__write_strobe = \fe__write_strobe$34 ;
endmodule

(* generator = "Amaranth" *)
module \CacheWrapper.l1_cache (fe__write_data, fe__write_strobe, fe__request_valid, fe__flush, clk, rst, fe__port_ready, be__port_ready, be__read_data, be__write_data, be__write_strobe, fe__read_data, be__address, be__request_valid, be__flush, fe__read_data_valid, hit_o, fe__address);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [1:0] \$100 ;
  reg \$101 ;
  reg \$102 ;
  reg \$103 ;
  reg \$104 ;
  reg \$105 ;
  reg \$106 ;
  wire \$107 ;
  reg [2:0] \$108 ;
  wire \$109 ;
  wire \$11 ;
  wire \$110 ;
  wire \$111 ;
  wire [2:0] \$112 ;
  wire \$113 ;
  wire \$114 ;
  wire \$115 ;
  wire [2:0] \$116 ;
  wire \$117 ;
  reg [1:0] \$118 ;
  reg [2:0] \$119 ;
  reg \$12 ;
  reg [31:0] \$120 ;
  reg [31:0] \$121 ;
  reg [31:0] \$122 ;
  reg [31:0] \$123 ;
  reg \$124 ;
  reg [2:0] \$125 ;
  reg \$126 ;
  reg [7:0] \$127 ;
  reg [3:0] \$128 ;
  reg [31:0] \$129 ;
  wire \$13 ;
  reg \$130 ;
  reg \$131 ;
  reg [2:0] \$132 ;
  reg \$133 ;
  reg \$134 ;
  reg \$135 ;
  reg \$136 ;
  reg \$137 ;
  reg \$138 ;
  reg \$139 ;
  wire \$14 ;
  reg \$140 ;
  reg \$141 ;
  reg \$142 ;
  reg \$143 ;
  reg \$144 ;
  reg \$145 ;
  reg \$146 ;
  reg \$147 ;
  reg \$148 ;
  reg \$149 ;
  wire \$15 ;
  reg \$150 ;
  reg [2:0] \$151 ;
  reg [7:0] \$152 ;
  reg \$153 ;
  reg [2:0] \$154 ;
  reg [7:0] \$155 ;
  reg [2:0] \$156 ;
  reg [7:0] \$157 ;
  reg [31:0] \$158 ;
  reg [2:0] \$159 ;
  wire \$16 ;
  reg \$160 ;
  reg \$161 ;
  reg \$162 ;
  reg \$163 ;
  reg \$164 ;
  reg \$165 ;
  reg \$166 ;
  reg \$167 ;
  reg \$168 ;
  reg \$169 ;
  wire \$17 ;
  reg \$170 ;
  reg \$171 ;
  reg \$172 ;
  reg \$173 ;
  reg \$174 ;
  reg \$175 ;
  reg \$176 ;
  reg \$177 ;
  reg \$178 ;
  wire \$18 ;
  wire [5:0] \$184 ;
  wire \$19 ;
  reg [31:0] \$2 ;
  wire \$20 ;
  wire \$21 ;
  reg [31:0] \$22 ;
  reg [31:0] \$23 ;
  wire [8:0] \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire [2:0] \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire [8:0] \$35 ;
  wire [3:0] \$36 ;
  wire [8:0] \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire [2:0] \$4 ;
  reg \$40 ;
  reg \$41 ;
  reg \$42 ;
  reg \$43 ;
  reg \$44 ;
  reg \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire [3:0] \$49 ;
  wire [3:0] \$5 ;
  wire \$50 ;
  reg [31:0] \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire [3:0] \$6 ;
  wire \$60 ;
  wire \$61 ;
  reg \$62 ;
  reg \$63 ;
  reg \$64 ;
  wire \$65 ;
  reg [2:0] \$66 ;
  reg \$67 ;
  reg \$68 ;
  reg \$69 ;
  wire \$7 ;
  wire \$70 ;
  reg [2:0] \$71 ;
  wire [2:0] \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  wire \$76 ;
  wire \$77 ;
  wire \$78 ;
  wire \$79 ;
  wire \$8 ;
  wire \$80 ;
  wire \$81 ;
  wire \$82 ;
  wire \$83 ;
  wire [3:0] \$84 ;
  wire [3:0] \$85 ;
  wire \$86 ;
  wire \$87 ;
  wire [1:0] \$88 ;
  wire \$89 ;
  reg \$9 ;
  wire \$90 ;
  wire \$91 ;
  wire \$92 ;
  wire \$93 ;
  wire \$94 ;
  wire \$95 ;
  wire \$96 ;
  wire \$97 ;
  wire [3:0] \$98 ;
  wire \$99 ;
  reg [4:0] \$signature__addr ;
  reg [4:0] \$signature__addr$30 ;
  reg [2:0] \$signature__addr$33 ;
  reg [2:0] \$signature__addr$44 ;
  reg [4:0] \$signature__addr$60 ;
  reg [4:0] \$signature__addr$61 ;
  reg [2:0] \$signature__addr$70 ;
  reg [2:0] \$signature__addr$71 ;
  wire [31:0] \$signature__data ;
  wire [31:0] \$signature__data$16 ;
  wire [2:0] \$signature__data$35 ;
  wire [2:0] \$signature__data$45 ;
  reg [31:0] \$signature__data$62 ;
  reg [31:0] \$signature__data$63 ;
  reg [2:0] \$signature__data$72 ;
  reg [2:0] \$signature__data$73 ;
  reg \$signature__en ;
  reg \$signature__en$1 ;
  reg [3:0] \$signature__en$58 ;
  reg [3:0] \$signature__en$59 ;
  reg \$signature__en$68 ;
  reg \$signature__en$69 ;
  reg access_i;
  output [7:0] be__address;
  reg [7:0] be__address;
  output be__flush;
  reg be__flush;
  input be__port_ready;
  wire be__port_ready;
  input [31:0] be__read_data;
  wire [31:0] be__read_data;
  output be__request_valid;
  reg be__request_valid;
  output [31:0] be__write_data;
  wire [31:0] be__write_data;
  output [3:0] be__write_strobe;
  wire [3:0] be__write_strobe;
  wire [7:0] be_buffer_address;
  wire [2:0] \be_buffer_address.index ;
  wire [2:0] \be_buffer_address.tag ;
  wire [1:0] \be_buffer_address.word_offset ;
  reg [31:0] be_buffer_write_data;
  reg [3:0] be_buffer_write_strobe;
  reg be_flush_requested = 1'h0;
  input clk;
  wire clk;
  reg dirty_bits_0_0 = 1'h0;
  reg dirty_bits_0_1 = 1'h0;
  reg dirty_bits_0_2 = 1'h0;
  reg dirty_bits_0_3 = 1'h0;
  reg dirty_bits_0_4 = 1'h0;
  reg dirty_bits_0_5 = 1'h0;
  reg dirty_bits_0_6 = 1'h0;
  reg dirty_bits_0_7 = 1'h0;
  reg dirty_bits_1_0 = 1'h0;
  reg dirty_bits_1_1 = 1'h0;
  reg dirty_bits_1_2 = 1'h0;
  reg dirty_bits_1_3 = 1'h0;
  reg dirty_bits_1_4 = 1'h0;
  reg dirty_bits_1_5 = 1'h0;
  reg dirty_bits_1_6 = 1'h0;
  reg dirty_bits_1_7 = 1'h0;
  reg [7:0] evict_block_address = 8'h00;
  wire [2:0] \evict_block_address.index ;
  wire [2:0] \evict_block_address.tag ;
  wire [1:0] \evict_block_address.word_offset ;
  reg [2:0] evict_block_counter = 3'h0;
  reg evict_block_enable = 1'h0;
  reg [1:0] evict_block_previous_word_offset = 2'h0;
  input [7:0] fe__address;
  wire [7:0] fe__address;
  input fe__flush;
  wire fe__flush;
  output fe__port_ready;
  wire fe__port_ready;
  output [31:0] fe__read_data;
  reg [31:0] fe__read_data;
  output fe__read_data_valid;
  reg fe__read_data_valid = 1'h0;
  input fe__request_valid;
  wire fe__request_valid;
  input [31:0] fe__write_data;
  wire [31:0] fe__write_data;
  input [3:0] fe__write_strobe;
  wire [3:0] fe__write_strobe;
  reg [7:0] fe_buffer_address = 8'h00;
  wire [2:0] \fe_buffer_address.index ;
  wire [2:0] \fe_buffer_address.tag ;
  wire [1:0] \fe_buffer_address.word_offset ;
  reg [31:0] fe_buffer_write_data = 32'd0;
  reg [3:0] fe_buffer_write_strobe = 4'h0;
  reg [31:0] fe_read_data_buffer = 32'd0;
  reg fe_read_data_select_buffer = 1'h0;
  reg flush_block_index = 1'h0;
  reg [2:0] flush_set_index = 3'h0;
  output hit_o;
  reg hit_o = 1'h0;
  reg [1:0] hit_vector;
  wire [7:0] incremented_address;
  wire [7:0] \incremented_address$24 ;
  wire [2:0] \incremented_address$24.index ;
  wire [2:0] \incremented_address$24.tag ;
  wire [1:0] \incremented_address$24.word_offset ;
  wire [2:0] \incremented_address.index ;
  wire [2:0] \incremented_address.tag ;
  wire [1:0] \incremented_address.word_offset ;
  reg next_block_replacement = 1'h0;
  wire next_replacement_o;
  reg \output ;
  (* enum_base_type = "States" *)
  (* enum_value_000 = "READY" *)
  (* enum_value_001 = "WRITE_BACK_BLOCK" *)
  (* enum_value_010 = "READ_BLOCK" *)
  (* enum_value_011 = "EXECUTE_FE_WRITE_REQUEST" *)
  (* enum_value_100 = "SEND_MEM_REQUEST" *)
  (* enum_value_101 = "FLUSH_CACHE" *)
  (* enum_value_110 = "FLUSH_BACKEND" *)
  (* enum_value_111 = "FLUSH_CACHE_BLOCK" *)
  reg [2:0] read_block_next_state = 3'h0;
  reg [7:0] read_block_previous_address = 8'h00;
  wire [2:0] \read_block_previous_address.index ;
  wire [2:0] \read_block_previous_address.tag ;
  wire [1:0] \read_block_previous_address.word_offset ;
  reg [2:0] read_block_read_counter = 3'h0;
  wire [7:0] read_block_write_address;
  wire [2:0] \read_block_write_address.index ;
  wire [2:0] \read_block_write_address.tag ;
  wire [1:0] \read_block_write_address.word_offset ;
  (* init = {0{1'b0}} *)
  wire [-1:0] read_block_write_counter;
  wire [31:0] read_block_write_data;
  reg read_data_mem_select = 1'h0;
  reg replace_i;
  input rst;
  wire rst;
  (* enum_base_type = "States" *)
  (* enum_value_000 = "READY" *)
  (* enum_value_001 = "WRITE_BACK_BLOCK" *)
  (* enum_value_010 = "READ_BLOCK" *)
  (* enum_value_011 = "EXECUTE_FE_WRITE_REQUEST" *)
  (* enum_value_100 = "SEND_MEM_REQUEST" *)
  (* enum_value_101 = "FLUSH_CACHE" *)
  (* enum_value_110 = "FLUSH_BACKEND" *)
  (* enum_value_111 = "FLUSH_CACHE_BLOCK" *)
  reg [2:0] send_mem_request_next_state = 3'h0;
  reg [2:0] set_i;
  (* enum_base_type = "States" *)
  (* enum_value_000 = "READY" *)
  (* enum_value_001 = "WRITE_BACK_BLOCK" *)
  (* enum_value_010 = "READ_BLOCK" *)
  (* enum_value_011 = "EXECUTE_FE_WRITE_REQUEST" *)
  (* enum_value_100 = "SEND_MEM_REQUEST" *)
  (* enum_value_101 = "FLUSH_CACHE" *)
  (* enum_value_110 = "FLUSH_BACKEND" *)
  (* enum_value_111 = "FLUSH_CACHE_BLOCK" *)
  reg [2:0] state = 3'h0;
  reg valid_bits_0_0 = 1'h0;
  reg valid_bits_0_1 = 1'h0;
  reg valid_bits_0_2 = 1'h0;
  reg valid_bits_0_3 = 1'h0;
  reg valid_bits_0_4 = 1'h0;
  reg valid_bits_0_5 = 1'h0;
  reg valid_bits_0_6 = 1'h0;
  reg valid_bits_0_7 = 1'h0;
  reg valid_bits_1_0 = 1'h0;
  reg valid_bits_1_1 = 1'h0;
  reg valid_bits_1_2 = 1'h0;
  reg valid_bits_1_3 = 1'h0;
  reg valid_bits_1_4 = 1'h0;
  reg valid_bits_1_5 = 1'h0;
  reg valid_bits_1_6 = 1'h0;
  reg valid_bits_1_7 = 1'h0;
  reg way_i;
  reg [7:0] write_back_address = 8'h00;
  wire [2:0] \write_back_address.index ;
  wire [2:0] \write_back_address.tag ;
  wire [1:0] \write_back_address.word_offset ;
  reg [31:0] write_back_data_0 = 32'd0;
  reg [31:0] write_back_data_1 = 32'd0;
  reg [31:0] write_back_data_2 = 32'd0;
  reg [31:0] write_back_data_3 = 32'd0;
  reg write_back_data_from_buffer = 1'h0;
  (* enum_base_type = "States" *)
  (* enum_value_000 = "READY" *)
  (* enum_value_001 = "WRITE_BACK_BLOCK" *)
  (* enum_value_010 = "READ_BLOCK" *)
  (* enum_value_011 = "EXECUTE_FE_WRITE_REQUEST" *)
  (* enum_value_100 = "SEND_MEM_REQUEST" *)
  (* enum_value_101 = "FLUSH_CACHE" *)
  (* enum_value_110 = "FLUSH_BACKEND" *)
  (* enum_value_111 = "FLUSH_CACHE_BLOCK" *)
  reg [2:0] write_back_next_state = 3'h0;
  reg write_back_way = 1'h0;
  reg [31:0] data_mem_0 [31:0];
  initial begin
    data_mem_0[0] = 32'd0;
    data_mem_0[1] = 32'd0;
    data_mem_0[2] = 32'd0;
    data_mem_0[3] = 32'd0;
    data_mem_0[4] = 32'd0;
    data_mem_0[5] = 32'd0;
    data_mem_0[6] = 32'd0;
    data_mem_0[7] = 32'd0;
    data_mem_0[8] = 32'd0;
    data_mem_0[9] = 32'd0;
    data_mem_0[10] = 32'd0;
    data_mem_0[11] = 32'd0;
    data_mem_0[12] = 32'd0;
    data_mem_0[13] = 32'd0;
    data_mem_0[14] = 32'd0;
    data_mem_0[15] = 32'd0;
    data_mem_0[16] = 32'd0;
    data_mem_0[17] = 32'd0;
    data_mem_0[18] = 32'd0;
    data_mem_0[19] = 32'd0;
    data_mem_0[20] = 32'd0;
    data_mem_0[21] = 32'd0;
    data_mem_0[22] = 32'd0;
    data_mem_0[23] = 32'd0;
    data_mem_0[24] = 32'd0;
    data_mem_0[25] = 32'd0;
    data_mem_0[26] = 32'd0;
    data_mem_0[27] = 32'd0;
    data_mem_0[28] = 32'd0;
    data_mem_0[29] = 32'd0;
    data_mem_0[30] = 32'd0;
    data_mem_0[31] = 32'd0;
  end
  always @(posedge clk) begin
    if (\$signature__en$58 [0])
      data_mem_0[\$signature__addr$60 ][7:0] <= \$signature__data$62 [7:0];
    if (\$signature__en$58 [1])
      data_mem_0[\$signature__addr$60 ][15:8] <= \$signature__data$62 [15:8];
    if (\$signature__en$58 [2])
      data_mem_0[\$signature__addr$60 ][23:16] <= \$signature__data$62 [23:16];
    if (\$signature__en$58 [3])
      data_mem_0[\$signature__addr$60 ][31:24] <= \$signature__data$62 [31:24];
  end
  reg [31:0] _0_;
  always @(posedge clk) begin
    if (\$signature__en ) begin
      _0_ <= data_mem_0[\$signature__addr ];
    end
  end
  assign \$signature__data  = _0_;
  reg [31:0] data_mem_1 [31:0];
  initial begin
    data_mem_1[0] = 32'd0;
    data_mem_1[1] = 32'd0;
    data_mem_1[2] = 32'd0;
    data_mem_1[3] = 32'd0;
    data_mem_1[4] = 32'd0;
    data_mem_1[5] = 32'd0;
    data_mem_1[6] = 32'd0;
    data_mem_1[7] = 32'd0;
    data_mem_1[8] = 32'd0;
    data_mem_1[9] = 32'd0;
    data_mem_1[10] = 32'd0;
    data_mem_1[11] = 32'd0;
    data_mem_1[12] = 32'd0;
    data_mem_1[13] = 32'd0;
    data_mem_1[14] = 32'd0;
    data_mem_1[15] = 32'd0;
    data_mem_1[16] = 32'd0;
    data_mem_1[17] = 32'd0;
    data_mem_1[18] = 32'd0;
    data_mem_1[19] = 32'd0;
    data_mem_1[20] = 32'd0;
    data_mem_1[21] = 32'd0;
    data_mem_1[22] = 32'd0;
    data_mem_1[23] = 32'd0;
    data_mem_1[24] = 32'd0;
    data_mem_1[25] = 32'd0;
    data_mem_1[26] = 32'd0;
    data_mem_1[27] = 32'd0;
    data_mem_1[28] = 32'd0;
    data_mem_1[29] = 32'd0;
    data_mem_1[30] = 32'd0;
    data_mem_1[31] = 32'd0;
  end
  always @(posedge clk) begin
    if (\$signature__en$59 [0])
      data_mem_1[\$signature__addr$61 ][7:0] <= \$signature__data$63 [7:0];
    if (\$signature__en$59 [1])
      data_mem_1[\$signature__addr$61 ][15:8] <= \$signature__data$63 [15:8];
    if (\$signature__en$59 [2])
      data_mem_1[\$signature__addr$61 ][23:16] <= \$signature__data$63 [23:16];
    if (\$signature__en$59 [3])
      data_mem_1[\$signature__addr$61 ][31:24] <= \$signature__data$63 [31:24];
  end
  reg [31:0] _1_;
  always @(posedge clk) begin
    if (\$signature__en$1 ) begin
      _1_ <= data_mem_1[\$signature__addr$30 ];
    end
  end
  assign \$signature__data$16  = _1_;
  reg [2:0] tag_mem_0 [7:0];
  initial begin
    tag_mem_0[0] = 3'h0;
    tag_mem_0[1] = 3'h0;
    tag_mem_0[2] = 3'h0;
    tag_mem_0[3] = 3'h0;
    tag_mem_0[4] = 3'h0;
    tag_mem_0[5] = 3'h0;
    tag_mem_0[6] = 3'h0;
    tag_mem_0[7] = 3'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$68 )
      tag_mem_0[\$signature__addr$70 ] <= \$signature__data$72 ;
  end
  assign \$signature__data$35  = tag_mem_0[\$signature__addr$33 ];
  reg [2:0] tag_mem_1 [7:0];
  initial begin
    tag_mem_1[0] = 3'h0;
    tag_mem_1[1] = 3'h0;
    tag_mem_1[2] = 3'h0;
    tag_mem_1[3] = 3'h0;
    tag_mem_1[4] = 3'h0;
    tag_mem_1[5] = 3'h0;
    tag_mem_1[6] = 3'h0;
    tag_mem_1[7] = 3'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$69 )
      tag_mem_1[\$signature__addr$71 ] <= \$signature__data$73 ;
  end
  assign \$signature__data$45  = tag_mem_1[\$signature__addr$44 ];
  assign fe__port_ready = ! state;
  assign \$1  = ~ fe_read_data_select_buffer;
  assign \$3  = read_block_previous_address[1:0] + 1'h0;
  assign \$4  = read_block_previous_address[1:0] + 1'h0;
  assign \$5  = evict_block_address[1:0] + evict_block_counter;
  assign \$6  = evict_block_address[1:0] + evict_block_counter;
  assign \$7  = evict_block_counter < 3'h4;
  assign \$8  = \$signature__data$35  == fe__address[7:5];
  assign \$10  = \$8  & \$9 ;
  assign \$11  = \$signature__data$45  == fe__address[7:5];
  assign \$13  = \$11  & \$12 ;
  assign \$14  = | hit_vector;
  assign \$15  = | fe__write_strobe;
  assign \$16  = | fe__write_strobe;
  assign \$18  = | fe__write_strobe;
  assign \$19  = & fe__write_strobe;
  assign \$20  = ~ \$19 ;
  assign \$24  = write_back_address + 1'h1;
  assign \$26  = ! read_block_read_counter;
  assign \$29  = read_block_read_counter < 3'h4;
  assign \$30  = \$28  & \$29 ;
  assign \$31  = & fe_buffer_write_strobe;
  assign \$32  = ! read_block_read_counter;
  assign \$33  = \$31  & \$32 ;
  assign \$35  = fe_buffer_address + 1'h1;
  assign \$36  = read_block_read_counter * 1'h1;
  assign \$37  = fe_buffer_address + \$36 ;
  assign \$38  = | read_block_read_counter;
  assign \$39  = be__port_ready & \$38 ;
  assign \$46  = \$42  & \$45 ;
  assign \$47  = ~ be_flush_requested;
  assign \$48  = evict_block_counter < 3'h4;
  assign \$49  = evict_block_counter + 1'h1;
  assign \$50  = evict_block_counter > 1'h0;
  assign \$52  = evict_block_counter == 3'h4;
  assign \$53  = | hit_vector;
  assign \$54  = | hit_vector;
  assign \$55  = | fe__write_strobe;
  assign \$56  = | fe__write_strobe;
  assign \$58  = | fe__write_strobe;
  assign \$59  = & fe__write_strobe;
  assign \$60  = ~ \$59 ;
  assign \$72  = write_back_address[1:0] + 1'h1;
  assign \$73  = write_back_address[1:0] == 2'h3;
  assign \$75  = ! read_block_read_counter;
  assign \$78  = read_block_read_counter < 3'h4;
  assign \$79  = \$77  & \$78 ;
  assign \$80  = & fe_buffer_write_strobe;
  assign \$81  = ! read_block_read_counter;
  assign \$82  = \$80  & \$81 ;
  assign \$84  = read_block_read_counter + 2'h2;
  assign \$85  = read_block_read_counter + 1'h1;
  assign \$86  = | read_block_read_counter;
  assign \$87  = be__port_ready & \$86 ;
  assign \$89  = read_block_read_counter == 1'h1;
  assign \$90  = | fe_buffer_write_strobe;
  assign \$91  = ~ \$90 ;
  assign \$92  = \$89  & \$91 ;
  assign \$96  = read_block_read_counter == 3'h4;
  assign \$98  = flush_set_index + 1'h1;
  assign \$99  = flush_set_index == 3'h7;
  assign \$100  = flush_block_index + 1'h1;
  assign \$107  = \$103  & \$106 ;
  assign \$109  = flush_set_index == 3'h7;
  assign \$111  = \$109  & \$110 ;
  assign \$112  = \$111  ? 3'h6 : 3'h5;
  assign \$113  = flush_set_index == 3'h7;
  assign \$115  = \$113  & \$114 ;
  assign \$116  = \$115  ? 3'h6 : 3'h5;
  assign \$117  = ~ be_flush_requested;
  always @(posedge clk)
    evict_block_previous_word_offset <= \$118 ;
  always @(posedge clk)
    evict_block_counter <= \$119 ;
  always @(posedge clk)
    write_back_data_0 <= \$120 ;
  always @(posedge clk)
    write_back_data_1 <= \$121 ;
  always @(posedge clk)
    write_back_data_2 <= \$122 ;
  always @(posedge clk)
    write_back_data_3 <= \$123 ;
  always @(posedge clk)
    evict_block_enable <= \$124 ;
  always @(posedge clk)
    state <= \$125 ;
  always @(posedge clk)
    fe__read_data_valid <= \$126 ;
  always @(posedge clk)
    fe_buffer_address <= \$127 ;
  always @(posedge clk)
    fe_buffer_write_strobe <= \$128 ;
  always @(posedge clk)
    fe_buffer_write_data <= \$129 ;
  always @(posedge clk)
    hit_o <= \$130 ;
  always @(posedge clk)
    next_block_replacement <= \$131 ;
  always @(posedge clk)
    send_mem_request_next_state <= \$132 ;
  always @(posedge clk)
    read_data_mem_select <= \$133 ;
  always @(posedge clk)
    fe_read_data_select_buffer <= \$134 ;
  always @(posedge clk)
    valid_bits_0_0 <= \$135 ;
  always @(posedge clk)
    valid_bits_0_1 <= \$136 ;
  always @(posedge clk)
    valid_bits_0_2 <= \$137 ;
  always @(posedge clk)
    valid_bits_0_3 <= \$138 ;
  always @(posedge clk)
    valid_bits_0_4 <= \$139 ;
  always @(posedge clk)
    valid_bits_0_5 <= \$140 ;
  always @(posedge clk)
    valid_bits_0_6 <= \$141 ;
  always @(posedge clk)
    valid_bits_0_7 <= \$142 ;
  always @(posedge clk)
    valid_bits_1_0 <= \$143 ;
  always @(posedge clk)
    valid_bits_1_1 <= \$144 ;
  always @(posedge clk)
    valid_bits_1_2 <= \$145 ;
  always @(posedge clk)
    valid_bits_1_3 <= \$146 ;
  always @(posedge clk)
    valid_bits_1_4 <= \$147 ;
  always @(posedge clk)
    valid_bits_1_5 <= \$148 ;
  always @(posedge clk)
    valid_bits_1_6 <= \$149 ;
  always @(posedge clk)
    valid_bits_1_7 <= \$150 ;
  always @(posedge clk)
    read_block_next_state <= \$151 ;
  always @(posedge clk)
    evict_block_address <= \$152 ;
  always @(posedge clk)
    write_back_data_from_buffer <= \$153 ;
  always @(posedge clk)
    write_back_next_state <= \$154 ;
  always @(posedge clk)
    write_back_address <= \$155 ;
  always @(posedge clk)
    read_block_read_counter <= \$156 ;
  always @(posedge clk)
    read_block_previous_address <= \$157 ;
  always @(posedge clk)
    fe_read_data_buffer <= \$158 ;
  always @(posedge clk)
    flush_set_index <= \$159 ;
  always @(posedge clk)
    flush_block_index <= \$160 ;
  always @(posedge clk)
    write_back_way <= \$161 ;
  always @(posedge clk)
    dirty_bits_0_0 <= \$162 ;
  always @(posedge clk)
    dirty_bits_0_1 <= \$163 ;
  always @(posedge clk)
    dirty_bits_0_2 <= \$164 ;
  always @(posedge clk)
    dirty_bits_0_3 <= \$165 ;
  always @(posedge clk)
    dirty_bits_0_4 <= \$166 ;
  always @(posedge clk)
    dirty_bits_0_5 <= \$167 ;
  always @(posedge clk)
    dirty_bits_0_6 <= \$168 ;
  always @(posedge clk)
    dirty_bits_0_7 <= \$169 ;
  always @(posedge clk)
    dirty_bits_1_0 <= \$170 ;
  always @(posedge clk)
    dirty_bits_1_1 <= \$171 ;
  always @(posedge clk)
    dirty_bits_1_2 <= \$172 ;
  always @(posedge clk)
    dirty_bits_1_3 <= \$173 ;
  always @(posedge clk)
    dirty_bits_1_4 <= \$174 ;
  always @(posedge clk)
    dirty_bits_1_5 <= \$175 ;
  always @(posedge clk)
    dirty_bits_1_6 <= \$176 ;
  always @(posedge clk)
    dirty_bits_1_7 <= \$177 ;
  always @(posedge clk)
    be_flush_requested <= \$178 ;
  \CacheWrapper.l1_cache.repl_pol  repl_pol (
    .access_i(access_i),
    .clk(clk),
    .next_replacement_o(next_replacement_o),
    .rst(rst),
    .set_i(set_i),
    .way_i(way_i)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (read_data_mem_select)
      1'h0:
          \$2  = \$signature__data ;
      1'h1:
          \$2  = \$signature__data$16 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fe__address[4:2])
      3'h0:
          \$9  = valid_bits_0_0;
      3'h1:
          \$9  = valid_bits_0_1;
      3'h2:
          \$9  = valid_bits_0_2;
      3'h3:
          \$9  = valid_bits_0_3;
      3'h4:
          \$9  = valid_bits_0_4;
      3'h5:
          \$9  = valid_bits_0_5;
      3'h6:
          \$9  = valid_bits_0_6;
      3'h7:
          \$9  = valid_bits_0_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fe__address[4:2])
      3'h0:
          \$12  = valid_bits_1_0;
      3'h1:
          \$12  = valid_bits_1_1;
      3'h2:
          \$12  = valid_bits_1_2;
      3'h3:
          \$12  = valid_bits_1_3;
      3'h4:
          \$12  = valid_bits_1_4;
      3'h5:
          \$12  = valid_bits_1_5;
      3'h6:
          \$12  = valid_bits_1_6;
      3'h7:
          \$12  = valid_bits_1_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (write_back_address[1:0])
      2'h0:
          \$22  = write_back_data_0;
      2'h1:
          \$22  = write_back_data_1;
      2'h2:
          \$22  = write_back_data_2;
      2'h3:
          \$22  = write_back_data_3;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (write_back_way)
      1'h0:
          \$23  = \$signature__data ;
      1'h1:
          \$23  = \$signature__data$16 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_set_index)
      3'h0:
          \$40  = dirty_bits_0_0;
      3'h1:
          \$40  = dirty_bits_0_1;
      3'h2:
          \$40  = dirty_bits_0_2;
      3'h3:
          \$40  = dirty_bits_0_3;
      3'h4:
          \$40  = dirty_bits_0_4;
      3'h5:
          \$40  = dirty_bits_0_5;
      3'h6:
          \$40  = dirty_bits_0_6;
      3'h7:
          \$40  = dirty_bits_0_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_set_index)
      3'h0:
          \$41  = dirty_bits_1_0;
      3'h1:
          \$41  = dirty_bits_1_1;
      3'h2:
          \$41  = dirty_bits_1_2;
      3'h3:
          \$41  = dirty_bits_1_3;
      3'h4:
          \$41  = dirty_bits_1_4;
      3'h5:
          \$41  = dirty_bits_1_5;
      3'h6:
          \$41  = dirty_bits_1_6;
      3'h7:
          \$41  = dirty_bits_1_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      1'h0:
          \$42  = \$40 ;
      1'h1:
          \$42  = \$41 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_set_index)
      3'h0:
          \$43  = valid_bits_0_0;
      3'h1:
          \$43  = valid_bits_0_1;
      3'h2:
          \$43  = valid_bits_0_2;
      3'h3:
          \$43  = valid_bits_0_3;
      3'h4:
          \$43  = valid_bits_0_4;
      3'h5:
          \$43  = valid_bits_0_5;
      3'h6:
          \$43  = valid_bits_0_6;
      3'h7:
          \$43  = valid_bits_0_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_set_index)
      3'h0:
          \$44  = valid_bits_1_0;
      3'h1:
          \$44  = valid_bits_1_1;
      3'h2:
          \$44  = valid_bits_1_2;
      3'h3:
          \$44  = valid_bits_1_3;
      3'h4:
          \$44  = valid_bits_1_4;
      3'h5:
          \$44  = valid_bits_1_5;
      3'h6:
          \$44  = valid_bits_1_6;
      3'h7:
          \$44  = valid_bits_1_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      1'h0:
          \$45  = \$43 ;
      1'h1:
          \$45  = \$44 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_block_replacement)
      1'h0:
          \$51  = \$signature__data ;
      1'h1:
          \$51  = \$signature__data$16 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fe__address[4:2])
      3'h0:
          \$62  = dirty_bits_0_0;
      3'h1:
          \$62  = dirty_bits_0_1;
      3'h2:
          \$62  = dirty_bits_0_2;
      3'h3:
          \$62  = dirty_bits_0_3;
      3'h4:
          \$62  = dirty_bits_0_4;
      3'h5:
          \$62  = dirty_bits_0_5;
      3'h6:
          \$62  = dirty_bits_0_6;
      3'h7:
          \$62  = dirty_bits_0_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fe__address[4:2])
      3'h0:
          \$63  = dirty_bits_1_0;
      3'h1:
          \$63  = dirty_bits_1_1;
      3'h2:
          \$63  = dirty_bits_1_2;
      3'h3:
          \$63  = dirty_bits_1_3;
      3'h4:
          \$63  = dirty_bits_1_4;
      3'h5:
          \$63  = dirty_bits_1_5;
      3'h6:
          \$63  = dirty_bits_1_6;
      3'h7:
          \$63  = dirty_bits_1_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_replacement_o)
      1'h0:
          \$64  = \$62 ;
      1'h1:
          \$64  = \$63 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_replacement_o)
      1'h0:
          \$66  = \$signature__data$35 ;
      1'h1:
          \$66  = \$signature__data$45 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fe__address[4:2])
      3'h0:
          \$67  = dirty_bits_0_0;
      3'h1:
          \$67  = dirty_bits_0_1;
      3'h2:
          \$67  = dirty_bits_0_2;
      3'h3:
          \$67  = dirty_bits_0_3;
      3'h4:
          \$67  = dirty_bits_0_4;
      3'h5:
          \$67  = dirty_bits_0_5;
      3'h6:
          \$67  = dirty_bits_0_6;
      3'h7:
          \$67  = dirty_bits_0_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fe__address[4:2])
      3'h0:
          \$68  = dirty_bits_1_0;
      3'h1:
          \$68  = dirty_bits_1_1;
      3'h2:
          \$68  = dirty_bits_1_2;
      3'h3:
          \$68  = dirty_bits_1_3;
      3'h4:
          \$68  = dirty_bits_1_4;
      3'h5:
          \$68  = dirty_bits_1_5;
      3'h6:
          \$68  = dirty_bits_1_6;
      3'h7:
          \$68  = dirty_bits_1_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_replacement_o)
      1'h0:
          \$69  = \$67 ;
      1'h1:
          \$69  = \$68 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_replacement_o)
      1'h0:
          \$71  = \$signature__data$35 ;
      1'h1:
          \$71  = \$signature__data$45 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_set_index)
      3'h0:
          \$101  = dirty_bits_0_0;
      3'h1:
          \$101  = dirty_bits_0_1;
      3'h2:
          \$101  = dirty_bits_0_2;
      3'h3:
          \$101  = dirty_bits_0_3;
      3'h4:
          \$101  = dirty_bits_0_4;
      3'h5:
          \$101  = dirty_bits_0_5;
      3'h6:
          \$101  = dirty_bits_0_6;
      3'h7:
          \$101  = dirty_bits_0_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_set_index)
      3'h0:
          \$102  = dirty_bits_1_0;
      3'h1:
          \$102  = dirty_bits_1_1;
      3'h2:
          \$102  = dirty_bits_1_2;
      3'h3:
          \$102  = dirty_bits_1_3;
      3'h4:
          \$102  = dirty_bits_1_4;
      3'h5:
          \$102  = dirty_bits_1_5;
      3'h6:
          \$102  = dirty_bits_1_6;
      3'h7:
          \$102  = dirty_bits_1_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      1'h0:
          \$103  = \$101 ;
      1'h1:
          \$103  = \$102 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_set_index)
      3'h0:
          \$104  = valid_bits_0_0;
      3'h1:
          \$104  = valid_bits_0_1;
      3'h2:
          \$104  = valid_bits_0_2;
      3'h3:
          \$104  = valid_bits_0_3;
      3'h4:
          \$104  = valid_bits_0_4;
      3'h5:
          \$104  = valid_bits_0_5;
      3'h6:
          \$104  = valid_bits_0_6;
      3'h7:
          \$104  = valid_bits_0_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_set_index)
      3'h0:
          \$105  = valid_bits_1_0;
      3'h1:
          \$105  = valid_bits_1_1;
      3'h2:
          \$105  = valid_bits_1_2;
      3'h3:
          \$105  = valid_bits_1_3;
      3'h4:
          \$105  = valid_bits_1_4;
      3'h5:
          \$105  = valid_bits_1_5;
      3'h6:
          \$105  = valid_bits_1_6;
      3'h7:
          \$105  = valid_bits_1_7;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      1'h0:
          \$106  = \$104 ;
      1'h1:
          \$106  = \$105 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      1'h0:
          \$108  = \$signature__data$35 ;
      1'h1:
          \$108  = \$signature__data$45 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en  = 1'h0;
    if (evict_block_enable) begin
      if (\$7 ) begin
        casez (next_block_replacement)
          1'h0:
              \$signature__en  = 1'h1;
        endcase
      end
    end
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            if (\$14 ) begin
              (* full_case = 32'd1 *)
              if (\$15 ) begin
              end else begin
                casez (\output )
                  1'h0:
                      \$signature__en  = 1'h1;
                endcase
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            (* full_case = 32'd1 *)
            if (write_back_data_from_buffer) begin
            end else begin
              casez (write_back_way)
                1'h0:
                    \$signature__en  = 1'h1;
              endcase
            end
          end
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$46 ) begin
            casez (flush_block_index)
              1'h0:
                  \$signature__en  = 1'h1;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$1  = 1'h0;
    if (evict_block_enable) begin
      if (\$7 ) begin
        (* full_case = 32'd1 *)
        casez (next_block_replacement)
          1'h0:
              /* empty */;
          1'h1:
              \$signature__en$1  = 1'h1;
        endcase
      end
    end
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            if (\$14 ) begin
              (* full_case = 32'd1 *)
              if (\$15 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (\output )
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$signature__en$1  = 1'h1;
                endcase
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            (* full_case = 32'd1 *)
            if (write_back_data_from_buffer) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (write_back_way)
                1'h0:
                    /* empty */;
                1'h1:
                    \$signature__en$1  = 1'h1;
              endcase
            end
          end
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$46 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  \$signature__en$1  = 1'h1;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (hit_vector)
      2'h1:
          \output  = 1'h0;
      2'h2:
          \output  = 1'h1;
      default:
          \output  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      fe__read_data = \$2 ;
    end else begin
      fe__read_data = fe_read_data_buffer;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr  = 5'h00;
    if (evict_block_enable) begin
      if (\$7 ) begin
        casez (next_block_replacement)
          1'h0:
              \$signature__addr  = \incremented_address$24 [4:0];
        endcase
      end
    end
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            if (\$14 ) begin
              (* full_case = 32'd1 *)
              if (\$15 ) begin
              end else begin
                casez (\output )
                  1'h0:
                      \$signature__addr  = fe__address[4:0];
                endcase
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            (* full_case = 32'd1 *)
            if (write_back_data_from_buffer) begin
            end else begin
              casez (write_back_way)
                1'h0:
                    \$signature__addr  = \$24 [4:0];
              endcase
            end
          end
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$46 ) begin
            casez (flush_block_index)
              1'h0:
                  \$signature__addr  = { flush_set_index, 2'h0 };
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$30  = 5'h00;
    if (evict_block_enable) begin
      if (\$7 ) begin
        (* full_case = 32'd1 *)
        casez (next_block_replacement)
          1'h0:
              /* empty */;
          1'h1:
              \$signature__addr$30  = \incremented_address$24 [4:0];
        endcase
      end
    end
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            if (\$14 ) begin
              (* full_case = 32'd1 *)
              if (\$15 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (\output )
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$signature__addr$30  = fe__address[4:0];
                endcase
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            (* full_case = 32'd1 *)
            if (write_back_data_from_buffer) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (write_back_way)
                1'h0:
                    /* empty */;
                1'h1:
                    \$signature__addr$30  = \$24 [4:0];
              endcase
            end
          end
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$46 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  \$signature__addr$30  = { flush_set_index, 2'h0 };
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$33  = 3'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            \$signature__addr$33  = fe__address[4:2];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    hit_vector = 2'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            hit_vector[0] = \$10 ;
            hit_vector[1] = \$13 ;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$44  = 3'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            \$signature__addr$44  = fe__address[4:2];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    set_i = 3'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            set_i = fe__address[4:2];
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              set_i = fe__address[4:2];
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                set_i = fe__address[4:2];
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    access_i = 1'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              access_i = 1'h1;
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                access_i = 1'h1;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    way_i = 1'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              way_i = \output ;
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                way_i = next_replacement_o;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$58  = 4'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                casez (\output )
                  1'h0:
                      \$signature__en$58  = fe__write_strobe;
                endcase
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    casez (next_replacement_o)
                      1'h0:
                          \$signature__en$58  = fe__write_strobe;
                    endcase
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$39 ) begin
            casez (next_block_replacement)
              1'h0:
                  \$signature__en$58  = 4'hf;
            endcase
          end
      3'h3:
          casez (next_block_replacement)
            1'h0:
                \$signature__en$58  = fe_buffer_write_strobe;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$59  = 4'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                (* full_case = 32'd1 *)
                casez (\output )
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$signature__en$59  = fe__write_strobe;
                endcase
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    (* full_case = 32'd1 *)
                    casez (next_replacement_o)
                      1'h0:
                          /* empty */;
                      1'h1:
                          \$signature__en$59  = fe__write_strobe;
                    endcase
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$39 ) begin
            (* full_case = 32'd1 *)
            casez (next_block_replacement)
              1'h0:
                  /* empty */;
              1'h1:
                  \$signature__en$59  = 4'hf;
            endcase
          end
      3'h3:
          (* full_case = 32'd1 *)
          casez (next_block_replacement)
            1'h0:
                /* empty */;
            1'h1:
                \$signature__en$59  = fe_buffer_write_strobe;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$60  = 5'h00;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                casez (\output )
                  1'h0:
                      \$signature__addr$60  = fe__address[4:0];
                endcase
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    casez (next_replacement_o)
                      1'h0:
                          \$signature__addr$60  = fe__address[4:0];
                    endcase
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$39 ) begin
            casez (next_block_replacement)
              1'h0:
                  \$signature__addr$60  = incremented_address[4:0];
            endcase
          end
      3'h3:
          casez (next_block_replacement)
            1'h0:
                \$signature__addr$60  = fe_buffer_address[4:0];
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$61  = 5'h00;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                (* full_case = 32'd1 *)
                casez (\output )
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$signature__addr$61  = fe__address[4:0];
                endcase
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    (* full_case = 32'd1 *)
                    casez (next_replacement_o)
                      1'h0:
                          /* empty */;
                      1'h1:
                          \$signature__addr$61  = fe__address[4:0];
                    endcase
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$39 ) begin
            (* full_case = 32'd1 *)
            casez (next_block_replacement)
              1'h0:
                  /* empty */;
              1'h1:
                  \$signature__addr$61  = incremented_address[4:0];
            endcase
          end
      3'h3:
          (* full_case = 32'd1 *)
          casez (next_block_replacement)
            1'h0:
                /* empty */;
            1'h1:
                \$signature__addr$61  = fe_buffer_address[4:0];
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$62  = 32'd0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                casez (\output )
                  1'h0:
                      \$signature__data$62  = fe__write_data;
                endcase
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    casez (next_replacement_o)
                      1'h0:
                          \$signature__data$62  = fe__write_data;
                    endcase
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$39 ) begin
            casez (next_block_replacement)
              1'h0:
                  \$signature__data$62  = read_block_write_data;
            endcase
          end
      3'h3:
          casez (next_block_replacement)
            1'h0:
                \$signature__data$62  = fe_buffer_write_data;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$63  = 32'd0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                (* full_case = 32'd1 *)
                casez (\output )
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$signature__data$63  = fe__write_data;
                endcase
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    (* full_case = 32'd1 *)
                    casez (next_replacement_o)
                      1'h0:
                          /* empty */;
                      1'h1:
                          \$signature__data$63  = fe__write_data;
                    endcase
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$39 ) begin
            (* full_case = 32'd1 *)
            casez (next_block_replacement)
              1'h0:
                  /* empty */;
              1'h1:
                  \$signature__data$63  = read_block_write_data;
            endcase
          end
      3'h3:
          (* full_case = 32'd1 *)
          casez (next_block_replacement)
            1'h0:
                /* empty */;
            1'h1:
                \$signature__data$63  = fe_buffer_write_data;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    be__address = 8'h00;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                if (be__port_ready) begin
                  be__address = fe__address;
                end
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
                if (be__port_ready) begin
                  be__address = fe__address;
                end
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    if (be__port_ready) begin
                      be__address = fe__address;
                    end
                  end
                end
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            be__address = write_back_address;
          end
      3'h2:
          if (\$30 ) begin
            be__address[7:2] = fe_buffer_address[7:2];
            (* full_case = 32'd1 *)
            if (\$34 ) begin
              be__address[1:0] = \$35 [1:0];
            end else begin
              be__address[1:0] = \$37 [1:0];
            end
          end
      3'h3:
          if (be__port_ready) begin
            be__address = fe_buffer_address;
          end
      3'h4:
          if (be__port_ready) begin
            be__address = fe_buffer_address;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    be_buffer_write_data = 32'd0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                if (be__port_ready) begin
                  be_buffer_write_data = fe__write_data;
                end
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
                if (be__port_ready) begin
                  be_buffer_write_data = fe__write_data;
                end
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    if (be__port_ready) begin
                      be_buffer_write_data = fe__write_data;
                    end
                  end
                end
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            (* full_case = 32'd1 *)
            if (write_back_data_from_buffer) begin
              be_buffer_write_data = \$22 ;
            end else begin
              be_buffer_write_data = \$23 ;
            end
          end
      3'h2:
          /* empty */;
      3'h3:
          if (be__port_ready) begin
            be_buffer_write_data = fe_buffer_write_data;
          end
      3'h4:
          if (be__port_ready) begin
            be_buffer_write_data = fe_buffer_write_data;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    be_buffer_write_strobe = 4'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                if (be__port_ready) begin
                  be_buffer_write_strobe = fe__write_strobe;
                end
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
                if (be__port_ready) begin
                  be_buffer_write_strobe = fe__write_strobe;
                end
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    if (be__port_ready) begin
                      be_buffer_write_strobe = fe__write_strobe;
                    end
                  end
                end
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            be_buffer_write_strobe = 4'hf;
          end
      3'h2:
          if (\$30 ) begin
            be_buffer_write_strobe = 4'h0;
          end
      3'h3:
          if (be__port_ready) begin
            be_buffer_write_strobe = fe_buffer_write_strobe;
          end
      3'h4:
          if (be__port_ready) begin
            be_buffer_write_strobe = fe_buffer_write_strobe;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    be__request_valid = 1'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              if (\$15 ) begin
                if (be__port_ready) begin
                  be__request_valid = 1'h1;
                end
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
                if (be__port_ready) begin
                  be__request_valid = 1'h1;
                end
              end else begin
                if (\$18 ) begin
                  (* full_case = 32'd1 *)
                  if (\$21 ) begin
                  end else begin
                    if (be__port_ready) begin
                      be__request_valid = 1'h1;
                    end
                  end
                end
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            be__request_valid = 1'h1;
          end
      3'h2:
          if (\$30 ) begin
            be__request_valid = 1'h1;
          end
      3'h3:
          if (be__port_ready) begin
            be__request_valid = 1'h1;
          end
      3'h4:
          if (be__port_ready) begin
            be__request_valid = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$68  = 1'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      \$signature__en$68  = 1'h1;
                endcase
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$69  = 1'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$signature__en$69  = 1'h1;
                endcase
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$70  = 3'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      \$signature__addr$70  = fe__address[4:2];
                endcase
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$71  = 3'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$signature__addr$71  = fe__address[4:2];
                endcase
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$72  = 3'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      \$signature__data$72  = fe__address[7:5];
                endcase
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$73  = 3'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      \$signature__data$73  = fe__address[7:5];
                endcase
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    replace_i = 1'h0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$17 ) begin
              end else begin
                replace_i = 1'h1;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    be__flush = 1'h0;
    (* full_case = 32'd1 *)
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          be__flush = 1'h1;
      3'h7:
          /* empty */;
      3'h6:
          if (be__port_ready) begin
            if (\$47 ) begin
              be__flush = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$118  = evict_block_previous_word_offset;
    if (evict_block_enable) begin
      if (\$48 ) begin
        \$118  = \incremented_address$24 [1:0];
      end
    end
    if (rst) begin
      \$118  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$119  = evict_block_counter;
    if (evict_block_enable) begin
      if (\$48 ) begin
        \$119  = \$49 [2:0];
      end
      if (\$52 ) begin
        \$119  = 3'h0;
      end
    end
    if (rst) begin
      \$119  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$120  = write_back_data_0;
    if (evict_block_enable) begin
      if (\$50 ) begin
        casez (evict_block_previous_word_offset)
          2'h0:
              \$120  = \$51 ;
        endcase
      end
    end
    if (rst) begin
      \$120  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$121  = write_back_data_1;
    if (evict_block_enable) begin
      if (\$50 ) begin
        casez (evict_block_previous_word_offset)
          2'h0:
              /* empty */;
          2'h1:
              \$121  = \$51 ;
        endcase
      end
    end
    if (rst) begin
      \$121  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$122  = write_back_data_2;
    if (evict_block_enable) begin
      if (\$50 ) begin
        casez (evict_block_previous_word_offset)
          2'h0:
              /* empty */;
          2'h1:
              /* empty */;
          2'h2:
              \$122  = \$51 ;
        endcase
      end
    end
    if (rst) begin
      \$122  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$123  = write_back_data_3;
    if (evict_block_enable) begin
      if (\$50 ) begin
        (* full_case = 32'd1 *)
        casez (evict_block_previous_word_offset)
          2'h0:
              /* empty */;
          2'h1:
              /* empty */;
          2'h2:
              /* empty */;
          2'h3:
              \$123  = \$51 ;
        endcase
      end
    end
    if (rst) begin
      \$123  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$124  = evict_block_enable;
    if (evict_block_enable) begin
      if (\$52 ) begin
        \$124  = 1'h0;
      end
    end
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                if (\$58 ) begin
                  if (\$61 ) begin
                    if (\$65 ) begin
                      \$124  = 1'h1;
                    end
                  end
                end else begin
                  if (\$70 ) begin
                    \$124  = 1'h1;
                  end
                end
              end
            end
          end
    endcase
    if (rst) begin
      \$124  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$125  = state;
    (* full_case = 32'd1 *)
    casez (state)
      3'h0:
          if (fe__flush) begin
            \$125  = 3'h5;
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
              (* full_case = 32'd1 *)
              if (\$55 ) begin
                (* full_case = 32'd1 *)
                if (be__port_ready) begin
                  \$125  = 3'h0;
                end else begin
                  \$125  = 3'h4;
                end
              end else begin
                \$125  = 3'h0;
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
                (* full_case = 32'd1 *)
                if (be__port_ready) begin
                  \$125  = 3'h0;
                end else begin
                  \$125  = 3'h4;
                end
              end else begin
                (* full_case = 32'd1 *)
                if (\$58 ) begin
                  (* full_case = 32'd1 *)
                  if (\$61 ) begin
                    \$125  = 3'h2;
                  end else begin
                    (* full_case = 32'd1 *)
                    if (be__port_ready) begin
                      \$125  = 3'h0;
                    end else begin
                      \$125  = 3'h4;
                    end
                  end
                end else begin
                  \$125  = 3'h2;
                end
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            if (\$73 ) begin
              \$125  = write_back_next_state;
            end
          end
      3'h2:
          if (\$87 ) begin
            if (\$97 ) begin
              \$125  = read_block_next_state;
            end
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (be__port_ready) begin
            \$125  = 3'h0;
          end else begin
            \$125  = 3'h4;
          end
      3'h4:
          (* full_case = 32'd1 *)
          if (be__port_ready) begin
            \$125  = send_mem_request_next_state;
          end else begin
            \$125  = 3'h4;
          end
      3'h5:
          \$125  = 3'h6;
      3'h7:
          (* full_case = 32'd1 *)
          if (\$107 ) begin
            \$125  = 3'h1;
          end else begin
            \$125  = \$116 ;
          end
      3'h6:
          if (be__port_ready) begin
            (* full_case = 32'd1 *)
            if (\$117 ) begin
            end else begin
              \$125  = 3'h0;
            end
          end
    endcase
    if (rst) begin
      \$125  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$126  = fe__read_data_valid;
    casez (state)
      3'h0:
          if (fe__flush) begin
            \$126  = 1'h0;
          end else if (fe__request_valid) begin
            \$126  = 1'h0;
            if (\$54 ) begin
              (* full_case = 32'd1 *)
              if (\$55 ) begin
              end else begin
                \$126  = 1'h1;
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$87 ) begin
            if (\$94 ) begin
              \$126  = 1'h1;
            end
          end
    endcase
    if (rst) begin
      \$126  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$127  = fe_buffer_address;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            \$127  = fe__address;
          end
    endcase
    if (rst) begin
      \$127  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$128  = fe_buffer_write_strobe;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            \$128  = fe__write_strobe;
          end
    endcase
    if (rst) begin
      \$128  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$129  = fe_buffer_write_data;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            \$129  = fe__write_data;
          end
    endcase
    if (rst) begin
      \$129  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$130  = hit_o;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            \$130  = \$53 ;
          end
    endcase
    if (rst) begin
      \$130  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$131  = next_block_replacement;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            \$131  = next_replacement_o;
          end
    endcase
    if (rst) begin
      \$131  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$132  = send_mem_request_next_state;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
              if (\$55 ) begin
                (* full_case = 32'd1 *)
                if (be__port_ready) begin
                end else begin
                  \$132  = 3'h0;
                end
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
                (* full_case = 32'd1 *)
                if (be__port_ready) begin
                end else begin
                  \$132  = 3'h0;
                end
              end else begin
                if (\$58 ) begin
                  (* full_case = 32'd1 *)
                  if (\$61 ) begin
                  end else begin
                    (* full_case = 32'd1 *)
                    if (be__port_ready) begin
                    end else begin
                      \$132  = 3'h0;
                    end
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          if (be__port_ready) begin
          end else begin
            \$132  = 3'h0;
          end
      3'h4:
          (* full_case = 32'd1 *)
          if (be__port_ready) begin
          end else begin
            \$132  = send_mem_request_next_state;
          end
    endcase
    if (rst) begin
      \$132  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$133  = read_data_mem_select;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            if (\$54 ) begin
              (* full_case = 32'd1 *)
              if (\$55 ) begin
              end else begin
                \$133  = \output ;
              end
            end
          end
    endcase
    if (rst) begin
      \$133  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$134  = fe_read_data_select_buffer;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            if (\$54 ) begin
              (* full_case = 32'd1 *)
              if (\$55 ) begin
              end else begin
                \$134  = 1'h0;
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$87 ) begin
            if (\$94 ) begin
              \$134  = 1'h1;
            end
          end
    endcase
    if (rst) begin
      \$134  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$135  = valid_bits_0_0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      casez (fe__address[4:2])
                        3'h0:
                            \$135  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$135  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$136  = valid_bits_0_1;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            \$136  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$136  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$137  = valid_bits_0_2;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            \$137  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$137  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$138  = valid_bits_0_3;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            \$138  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$138  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$139  = valid_bits_0_4;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            /* empty */;
                        3'h4:
                            \$139  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$139  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$140  = valid_bits_0_5;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            /* empty */;
                        3'h4:
                            /* empty */;
                        3'h5:
                            \$140  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$140  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$141  = valid_bits_0_6;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            /* empty */;
                        3'h4:
                            /* empty */;
                        3'h5:
                            /* empty */;
                        3'h6:
                            \$141  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$141  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$142  = valid_bits_0_7;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                casez (next_replacement_o)
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            /* empty */;
                        3'h4:
                            /* empty */;
                        3'h5:
                            /* empty */;
                        3'h6:
                            /* empty */;
                        3'h7:
                            \$142  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$142  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$143  = valid_bits_1_0;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      casez (fe__address[4:2])
                        3'h0:
                            \$143  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$143  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$144  = valid_bits_1_1;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            \$144  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$144  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$145  = valid_bits_1_2;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            \$145  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$145  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$146  = valid_bits_1_3;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            \$146  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$146  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$147  = valid_bits_1_4;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            /* empty */;
                        3'h4:
                            \$147  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$147  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$148  = valid_bits_1_5;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            /* empty */;
                        3'h4:
                            /* empty */;
                        3'h5:
                            \$148  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$148  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$149  = valid_bits_1_6;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            /* empty */;
                        3'h4:
                            /* empty */;
                        3'h5:
                            /* empty */;
                        3'h6:
                            \$149  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$149  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$150  = valid_bits_1_7;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                casez (next_replacement_o)
                  1'h0:
                      /* empty */;
                  1'h1:
                      (* full_case = 32'd1 *)
                      casez (fe__address[4:2])
                        3'h0:
                            /* empty */;
                        3'h1:
                            /* empty */;
                        3'h2:
                            /* empty */;
                        3'h3:
                            /* empty */;
                        3'h4:
                            /* empty */;
                        3'h5:
                            /* empty */;
                        3'h6:
                            /* empty */;
                        3'h7:
                            \$150  = 1'h1;
                      endcase
                endcase
              end
            end
          end
    endcase
    if (rst) begin
      \$150  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$151  = read_block_next_state;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                if (\$58 ) begin
                  if (\$61 ) begin
                    (* full_case = 32'd1 *)
                    if (\$65 ) begin
                      \$151  = 3'h1;
                    end else begin
                      \$151  = 3'h3;
                    end
                  end
                end else begin
                  (* full_case = 32'd1 *)
                  if (\$70 ) begin
                    \$151  = 3'h1;
                  end else begin
                    \$151  = 3'h0;
                  end
                end
              end
            end
          end
    endcase
    if (rst) begin
      \$151  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$152  = evict_block_address;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                if (\$58 ) begin
                  if (\$61 ) begin
                    if (\$65 ) begin
                      \$152  = fe__address;
                    end
                  end
                end else begin
                  if (\$70 ) begin
                    \$152  = fe__address;
                  end
                end
              end
            end
          end
    endcase
    if (rst) begin
      \$152  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$153  = write_back_data_from_buffer;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                if (\$58 ) begin
                  if (\$61 ) begin
                    if (\$65 ) begin
                      \$153  = 1'h1;
                    end
                  end
                end else begin
                  if (\$70 ) begin
                    \$153  = 1'h1;
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            \$153  = 1'h0;
          end
    endcase
    if (rst) begin
      \$153  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$154  = write_back_next_state;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                if (\$58 ) begin
                  if (\$61 ) begin
                    if (\$65 ) begin
                      \$154  = 3'h3;
                    end
                  end
                end else begin
                  if (\$70 ) begin
                    \$154  = 3'h0;
                  end
                end
              end
            end
          end
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            \$154  = \$112 ;
          end
    endcase
    if (rst) begin
      \$154  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$155  = write_back_address;
    casez (state)
      3'h0:
          if (fe__flush) begin
          end else if (fe__request_valid) begin
            (* full_case = 32'd1 *)
            if (\$54 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
              end else begin
                (* full_case = 32'd1 *)
                if (\$58 ) begin
                  if (\$61 ) begin
                    if (\$65 ) begin
                      \$155  = { \$66 , fe__address[4:2], 2'h0 };
                    end
                  end
                end else begin
                  if (\$70 ) begin
                    \$155  = { \$71 , fe__address[4:2], 2'h0 };
                  end
                end
              end
            end
          end
      3'h1:
          if (be__port_ready) begin
            \$155 [1:0] = \$72 [1:0];
          end
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            \$155 [7:5] = \$108 ;
            \$155 [4:2] = flush_set_index;
            \$155 [1:0] = 2'h0;
          end
    endcase
    if (rst) begin
      \$155  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$156  = read_block_read_counter;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
        begin
          if (\$79 ) begin
            (* full_case = 32'd1 *)
            if (\$83 ) begin
              \$156  = \$84 [2:0];
            end else begin
              \$156  = \$85 [2:0];
            end
          end
          if (\$87 ) begin
            if (\$97 ) begin
              \$156  = 3'h0;
            end
          end
        end
    endcase
    if (rst) begin
      \$156  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$157  = read_block_previous_address;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$79 ) begin
            \$157  = be__address;
          end
    endcase
    if (rst) begin
      \$157  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$158  = fe_read_data_buffer;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$87 ) begin
            if (\$94 ) begin
              \$158  = read_block_write_data;
            end
          end
    endcase
    if (rst) begin
      \$158  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$159  = flush_set_index;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          \$159  = \$98 [2:0];
    endcase
    if (rst) begin
      \$159  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$160  = flush_block_index;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$99 ) begin
            \$160  = \$100 [0];
          end
    endcase
    if (rst) begin
      \$160  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$161  = write_back_way;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            \$161  = flush_block_index;
          end
    endcase
    if (rst) begin
      \$161  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$162  = dirty_bits_0_0;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            casez (flush_block_index)
              1'h0:
                  casez (flush_set_index)
                    3'h0:
                        \$162  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$162  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$163  = dirty_bits_0_1;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            casez (flush_block_index)
              1'h0:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        \$163  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$163  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$164  = dirty_bits_0_2;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            casez (flush_block_index)
              1'h0:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        \$164  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$164  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$165  = dirty_bits_0_3;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            casez (flush_block_index)
              1'h0:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        \$165  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$165  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$166  = dirty_bits_0_4;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            casez (flush_block_index)
              1'h0:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        /* empty */;
                    3'h4:
                        \$166  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$166  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$167  = dirty_bits_0_5;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            casez (flush_block_index)
              1'h0:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        /* empty */;
                    3'h4:
                        /* empty */;
                    3'h5:
                        \$167  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$167  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$168  = dirty_bits_0_6;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            casez (flush_block_index)
              1'h0:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        /* empty */;
                    3'h4:
                        /* empty */;
                    3'h5:
                        /* empty */;
                    3'h6:
                        \$168  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$168  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$169  = dirty_bits_0_7;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            casez (flush_block_index)
              1'h0:
                  (* full_case = 32'd1 *)
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        /* empty */;
                    3'h4:
                        /* empty */;
                    3'h5:
                        /* empty */;
                    3'h6:
                        /* empty */;
                    3'h7:
                        \$169  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$169  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$170  = dirty_bits_1_0;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  casez (flush_set_index)
                    3'h0:
                        \$170  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$170  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$171  = dirty_bits_1_1;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        \$171  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$171  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$172  = dirty_bits_1_2;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        \$172  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$172  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$173  = dirty_bits_1_3;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        \$173  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$173  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$174  = dirty_bits_1_4;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        /* empty */;
                    3'h4:
                        \$174  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$174  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$175  = dirty_bits_1_5;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        /* empty */;
                    3'h4:
                        /* empty */;
                    3'h5:
                        \$175  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$175  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$176  = dirty_bits_1_6;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        /* empty */;
                    3'h4:
                        /* empty */;
                    3'h5:
                        /* empty */;
                    3'h6:
                        \$176  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$176  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$177  = dirty_bits_1_7;
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          if (\$107 ) begin
            (* full_case = 32'd1 *)
            casez (flush_block_index)
              1'h0:
                  /* empty */;
              1'h1:
                  (* full_case = 32'd1 *)
                  casez (flush_set_index)
                    3'h0:
                        /* empty */;
                    3'h1:
                        /* empty */;
                    3'h2:
                        /* empty */;
                    3'h3:
                        /* empty */;
                    3'h4:
                        /* empty */;
                    3'h5:
                        /* empty */;
                    3'h6:
                        /* empty */;
                    3'h7:
                        \$177  = 1'h0;
                  endcase
            endcase
          end
    endcase
    if (rst) begin
      \$177  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$178  = be_flush_requested;
    (* full_case = 32'd1 *)
    casez (state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h7:
          /* empty */;
      3'h6:
          if (be__port_ready) begin
            (* full_case = 32'd1 *)
            if (\$117 ) begin
              \$178  = 1'h1;
            end else begin
              \$178  = 1'h0;
            end
          end
    endcase
    if (rst) begin
      \$178  = 1'h0;
    end
  end
  assign be_buffer_address = be__address;
  assign read_block_write_address = incremented_address;
  assign \be_buffer_address.word_offset  = be__address[1:0];
  assign \be_buffer_address.index  = be__address[4:2];
  assign \be_buffer_address.tag  = be__address[7:5];
  assign \incremented_address.word_offset  = incremented_address[1:0];
  assign \incremented_address.index  = incremented_address[4:2];
  assign \incremented_address.tag  = incremented_address[7:5];
  assign \read_block_previous_address.word_offset  = read_block_previous_address[1:0];
  assign \read_block_previous_address.index  = read_block_previous_address[4:2];
  assign \read_block_previous_address.tag  = read_block_previous_address[7:5];
  assign \read_block_write_address.word_offset  = incremented_address[1:0];
  assign \read_block_write_address.index  = incremented_address[4:2];
  assign \read_block_write_address.tag  = incremented_address[7:5];
  assign \incremented_address$24.word_offset  = \incremented_address$24 [1:0];
  assign \incremented_address$24.index  = \incremented_address$24 [4:2];
  assign \incremented_address$24.tag  = \incremented_address$24 [7:5];
  assign \evict_block_address.word_offset  = evict_block_address[1:0];
  assign \evict_block_address.index  = evict_block_address[4:2];
  assign \evict_block_address.tag  = evict_block_address[7:5];
  assign \write_back_address.word_offset  = write_back_address[1:0];
  assign \write_back_address.index  = write_back_address[4:2];
  assign \write_back_address.tag  = write_back_address[7:5];
  assign \fe_buffer_address.word_offset  = fe_buffer_address[1:0];
  assign \fe_buffer_address.index  = fe_buffer_address[4:2];
  assign \fe_buffer_address.tag  = fe_buffer_address[7:5];
  assign \incremented_address$24 [1:0] = \$6 [1:0];
  assign \incremented_address$24 [7:2] = evict_block_address[7:2];
  assign incremented_address[1:0] = \$4 [1:0];
  assign incremented_address[7:2] = read_block_previous_address[7:2];
  assign be__write_strobe = be_buffer_write_strobe;
  assign be__write_data = be_buffer_write_data;
  assign \$184  = 6'h00;
  assign read_block_write_data = be__read_data;
  assign \$17  = \$16 ;
  assign \$21  = 1'h1;
  assign \$25  = 1'h1;
  assign \$27  = 1'h1;
  assign \$28  = be__port_ready;
  assign \$34  = \$33 ;
  assign \$57  = \$56 ;
  assign \$61  = 1'h1;
  assign \$65  = 1'h0;
  assign \$70  = 1'h0;
  assign \$74  = 1'h1;
  assign \$76  = 1'h1;
  assign \$77  = be__port_ready;
  assign \$83  = \$82 ;
  assign \$88  = 2'h1;
  assign \$93  = 1'h1;
  assign \$94  = \$92 ;
  assign \$95  = 1'h1;
  assign \$97  = \$96 ;
  assign \$110  = flush_block_index;
  assign \$114  = flush_block_index;
endmodule

(* generator = "Amaranth" *)
module \CacheWrapper.l1_cache.repl_pol (rst, next_replacement_o, set_i, access_i, way_i, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire \$1 ;
  reg \$10 ;
  reg \$11 ;
  reg \$12 ;
  reg \$13 ;
  wire \$2 ;
  wire [1:0] \$3 ;
  reg \$4 ;
  wire [1:0] \$5 ;
  reg \$6 ;
  reg \$7 ;
  reg \$8 ;
  reg \$9 ;
  reg \$signal  = 1'h0;
  reg \$signal$10  = 1'h0;
  reg \$signal$11  = 1'h0;
  reg \$signal$5  = 1'h0;
  reg \$signal$6  = 1'h0;
  reg \$signal$7  = 1'h0;
  reg \$signal$8  = 1'h0;
  reg \$signal$9  = 1'h0;
  input access_i;
  wire access_i;
  input clk;
  wire clk;
  output next_replacement_o;
  wire next_replacement_o;
  input rst;
  wire rst;
  input [2:0] set_i;
  wire [2:0] set_i;
  input way_i;
  wire way_i;
  assign \$1  = ~ way_i;
  always @(posedge clk)
    \$signal  <= \$6 ;
  always @(posedge clk)
    \$signal$5  <= \$7 ;
  always @(posedge clk)
    \$signal$6  <= \$8 ;
  always @(posedge clk)
    \$signal$7  <= \$9 ;
  always @(posedge clk)
    \$signal$8  <= \$10 ;
  always @(posedge clk)
    \$signal$9  <= \$11 ;
  always @(posedge clk)
    \$signal$10  <= \$12 ;
  always @(posedge clk)
    \$signal$11  <= \$13 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    casez (set_i)
      3'h0:
          \$4  = \$signal ;
      3'h1:
          \$4  = \$signal$5 ;
      3'h2:
          \$4  = \$signal$6 ;
      3'h3:
          \$4  = \$signal$7 ;
      3'h4:
          \$4  = \$signal$8 ;
      3'h5:
          \$4  = \$signal$9 ;
      3'h6:
          \$4  = \$signal$10 ;
      3'h7:
          \$4  = \$signal$11 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$6  = \$signal ;
    if (access_i) begin
      casez (\$3 )
        2'h0:
            casez (set_i)
              3'h0:
                  \$6  = \$1 ;
            endcase
      endcase
    end
    if (rst) begin
      \$6  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$7  = \$signal$5 ;
    if (access_i) begin
      casez (\$3 )
        2'h0:
            casez (set_i)
              3'h0:
                  /* empty */;
              3'h1:
                  \$7  = \$1 ;
            endcase
      endcase
    end
    if (rst) begin
      \$7  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$8  = \$signal$6 ;
    if (access_i) begin
      casez (\$3 )
        2'h0:
            casez (set_i)
              3'h0:
                  /* empty */;
              3'h1:
                  /* empty */;
              3'h2:
                  \$8  = \$1 ;
            endcase
      endcase
    end
    if (rst) begin
      \$8  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$9  = \$signal$7 ;
    if (access_i) begin
      casez (\$3 )
        2'h0:
            casez (set_i)
              3'h0:
                  /* empty */;
              3'h1:
                  /* empty */;
              3'h2:
                  /* empty */;
              3'h3:
                  \$9  = \$1 ;
            endcase
      endcase
    end
    if (rst) begin
      \$9  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$10  = \$signal$8 ;
    if (access_i) begin
      casez (\$3 )
        2'h0:
            casez (set_i)
              3'h0:
                  /* empty */;
              3'h1:
                  /* empty */;
              3'h2:
                  /* empty */;
              3'h3:
                  /* empty */;
              3'h4:
                  \$10  = \$1 ;
            endcase
      endcase
    end
    if (rst) begin
      \$10  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$11  = \$signal$9 ;
    if (access_i) begin
      casez (\$3 )
        2'h0:
            casez (set_i)
              3'h0:
                  /* empty */;
              3'h1:
                  /* empty */;
              3'h2:
                  /* empty */;
              3'h3:
                  /* empty */;
              3'h4:
                  /* empty */;
              3'h5:
                  \$11  = \$1 ;
            endcase
      endcase
    end
    if (rst) begin
      \$11  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$12  = \$signal$10 ;
    if (access_i) begin
      casez (\$3 )
        2'h0:
            casez (set_i)
              3'h0:
                  /* empty */;
              3'h1:
                  /* empty */;
              3'h2:
                  /* empty */;
              3'h3:
                  /* empty */;
              3'h4:
                  /* empty */;
              3'h5:
                  /* empty */;
              3'h6:
                  \$12  = \$1 ;
            endcase
      endcase
    end
    if (rst) begin
      \$12  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$13  = \$signal$11 ;
    if (access_i) begin
      casez (\$3 )
        2'h0:
            (* full_case = 32'd1 *)
            casez (set_i)
              3'h0:
                  /* empty */;
              3'h1:
                  /* empty */;
              3'h2:
                  /* empty */;
              3'h3:
                  /* empty */;
              3'h4:
                  /* empty */;
              3'h5:
                  /* empty */;
              3'h6:
                  /* empty */;
              3'h7:
                  \$13  = \$1 ;
            endcase
      endcase
    end
    if (rst) begin
      \$13  = 1'h0;
    end
  end
  assign \$2  = 1'h0;
  assign \$5  = 2'h0;
  assign next_replacement_o = \$4 ;
  assign \$3  = 2'h0;
endmodule

(* generator = "Amaranth" *)
module \CacheWrapper.main_memory (rst, fe__port_ready, fe__read_data, fe__write_data, fe__write_strobe, fe__address, fe__request_valid, fe__read_data_valid, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  wire [8:0] \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire [4:0] \$19 ;
  wire \$2 ;
  reg \$20 ;
  reg \$21 ;
  reg \$22 ;
  reg [3:0] \$23 ;
  reg [3:0] \$24 ;
  reg [7:0] \$25 ;
  reg [31:0] \$26 ;
  reg \$27 ;
  reg [7:0] \$28 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [4:0] \$8 ;
  wire \$9 ;
  wire [7:0] aligned_address;
  input clk;
  wire clk;
  input [7:0] fe__address;
  wire [7:0] fe__address;
  output fe__port_ready;
  wire fe__port_ready;
  output [31:0] fe__read_data;
  wire [31:0] fe__read_data;
  output fe__read_data_valid;
  reg fe__read_data_valid = 1'h0;
  input fe__request_valid;
  wire fe__request_valid;
  input [31:0] fe__write_data;
  wire [31:0] fe__write_data;
  input [3:0] fe__write_strobe;
  wire [3:0] fe__write_strobe;
  reg [3:0] latency_counter = 4'h0;
  reg processing_request = 1'h0;
  reg [7:0] read_port__addr = 8'h00;
  wire [31:0] read_port__data;
  reg read_port__en = 1'h1;
  reg request_type = 1'h0;
  input rst;
  wire rst;
  reg [7:0] write_port__addr = 8'h00;
  reg [31:0] write_port__data = 32'd0;
  reg [3:0] write_port__en = 4'h0;
  reg [31:0] data_memory [255:0];
  initial begin
    data_memory[0] = 32'd0;
    data_memory[1] = 32'd0;
    data_memory[2] = 32'd0;
    data_memory[3] = 32'd0;
    data_memory[4] = 32'd0;
    data_memory[5] = 32'd0;
    data_memory[6] = 32'd0;
    data_memory[7] = 32'd0;
    data_memory[8] = 32'd0;
    data_memory[9] = 32'd0;
    data_memory[10] = 32'd0;
    data_memory[11] = 32'd0;
    data_memory[12] = 32'd0;
    data_memory[13] = 32'd0;
    data_memory[14] = 32'd0;
    data_memory[15] = 32'd0;
    data_memory[16] = 32'd0;
    data_memory[17] = 32'd0;
    data_memory[18] = 32'd0;
    data_memory[19] = 32'd0;
    data_memory[20] = 32'd0;
    data_memory[21] = 32'd0;
    data_memory[22] = 32'd0;
    data_memory[23] = 32'd0;
    data_memory[24] = 32'd0;
    data_memory[25] = 32'd0;
    data_memory[26] = 32'd0;
    data_memory[27] = 32'd0;
    data_memory[28] = 32'd0;
    data_memory[29] = 32'd0;
    data_memory[30] = 32'd0;
    data_memory[31] = 32'd0;
    data_memory[32] = 32'd0;
    data_memory[33] = 32'd0;
    data_memory[34] = 32'd0;
    data_memory[35] = 32'd0;
    data_memory[36] = 32'd0;
    data_memory[37] = 32'd0;
    data_memory[38] = 32'd0;
    data_memory[39] = 32'd0;
    data_memory[40] = 32'd0;
    data_memory[41] = 32'd0;
    data_memory[42] = 32'd0;
    data_memory[43] = 32'd0;
    data_memory[44] = 32'd0;
    data_memory[45] = 32'd0;
    data_memory[46] = 32'd0;
    data_memory[47] = 32'd0;
    data_memory[48] = 32'd0;
    data_memory[49] = 32'd0;
    data_memory[50] = 32'd0;
    data_memory[51] = 32'd0;
    data_memory[52] = 32'd0;
    data_memory[53] = 32'd0;
    data_memory[54] = 32'd0;
    data_memory[55] = 32'd0;
    data_memory[56] = 32'd0;
    data_memory[57] = 32'd0;
    data_memory[58] = 32'd0;
    data_memory[59] = 32'd0;
    data_memory[60] = 32'd0;
    data_memory[61] = 32'd0;
    data_memory[62] = 32'd0;
    data_memory[63] = 32'd0;
    data_memory[64] = 32'd0;
    data_memory[65] = 32'd0;
    data_memory[66] = 32'd0;
    data_memory[67] = 32'd0;
    data_memory[68] = 32'd0;
    data_memory[69] = 32'd0;
    data_memory[70] = 32'd0;
    data_memory[71] = 32'd0;
    data_memory[72] = 32'd0;
    data_memory[73] = 32'd0;
    data_memory[74] = 32'd0;
    data_memory[75] = 32'd0;
    data_memory[76] = 32'd0;
    data_memory[77] = 32'd0;
    data_memory[78] = 32'd0;
    data_memory[79] = 32'd0;
    data_memory[80] = 32'd0;
    data_memory[81] = 32'd0;
    data_memory[82] = 32'd0;
    data_memory[83] = 32'd0;
    data_memory[84] = 32'd0;
    data_memory[85] = 32'd0;
    data_memory[86] = 32'd0;
    data_memory[87] = 32'd0;
    data_memory[88] = 32'd0;
    data_memory[89] = 32'd0;
    data_memory[90] = 32'd0;
    data_memory[91] = 32'd0;
    data_memory[92] = 32'd0;
    data_memory[93] = 32'd0;
    data_memory[94] = 32'd0;
    data_memory[95] = 32'd0;
    data_memory[96] = 32'd0;
    data_memory[97] = 32'd0;
    data_memory[98] = 32'd0;
    data_memory[99] = 32'd0;
    data_memory[100] = 32'd0;
    data_memory[101] = 32'd0;
    data_memory[102] = 32'd0;
    data_memory[103] = 32'd0;
    data_memory[104] = 32'd0;
    data_memory[105] = 32'd0;
    data_memory[106] = 32'd0;
    data_memory[107] = 32'd0;
    data_memory[108] = 32'd0;
    data_memory[109] = 32'd0;
    data_memory[110] = 32'd0;
    data_memory[111] = 32'd0;
    data_memory[112] = 32'd0;
    data_memory[113] = 32'd0;
    data_memory[114] = 32'd0;
    data_memory[115] = 32'd0;
    data_memory[116] = 32'd0;
    data_memory[117] = 32'd0;
    data_memory[118] = 32'd0;
    data_memory[119] = 32'd0;
    data_memory[120] = 32'd0;
    data_memory[121] = 32'd0;
    data_memory[122] = 32'd0;
    data_memory[123] = 32'd0;
    data_memory[124] = 32'd0;
    data_memory[125] = 32'd0;
    data_memory[126] = 32'd0;
    data_memory[127] = 32'd0;
    data_memory[128] = 32'd0;
    data_memory[129] = 32'd0;
    data_memory[130] = 32'd0;
    data_memory[131] = 32'd0;
    data_memory[132] = 32'd0;
    data_memory[133] = 32'd0;
    data_memory[134] = 32'd0;
    data_memory[135] = 32'd0;
    data_memory[136] = 32'd0;
    data_memory[137] = 32'd0;
    data_memory[138] = 32'd0;
    data_memory[139] = 32'd0;
    data_memory[140] = 32'd0;
    data_memory[141] = 32'd0;
    data_memory[142] = 32'd0;
    data_memory[143] = 32'd0;
    data_memory[144] = 32'd0;
    data_memory[145] = 32'd0;
    data_memory[146] = 32'd0;
    data_memory[147] = 32'd0;
    data_memory[148] = 32'd0;
    data_memory[149] = 32'd0;
    data_memory[150] = 32'd0;
    data_memory[151] = 32'd0;
    data_memory[152] = 32'd0;
    data_memory[153] = 32'd0;
    data_memory[154] = 32'd0;
    data_memory[155] = 32'd0;
    data_memory[156] = 32'd0;
    data_memory[157] = 32'd0;
    data_memory[158] = 32'd0;
    data_memory[159] = 32'd0;
    data_memory[160] = 32'd0;
    data_memory[161] = 32'd0;
    data_memory[162] = 32'd0;
    data_memory[163] = 32'd0;
    data_memory[164] = 32'd0;
    data_memory[165] = 32'd0;
    data_memory[166] = 32'd0;
    data_memory[167] = 32'd0;
    data_memory[168] = 32'd0;
    data_memory[169] = 32'd0;
    data_memory[170] = 32'd0;
    data_memory[171] = 32'd0;
    data_memory[172] = 32'd0;
    data_memory[173] = 32'd0;
    data_memory[174] = 32'd0;
    data_memory[175] = 32'd0;
    data_memory[176] = 32'd0;
    data_memory[177] = 32'd0;
    data_memory[178] = 32'd0;
    data_memory[179] = 32'd0;
    data_memory[180] = 32'd0;
    data_memory[181] = 32'd0;
    data_memory[182] = 32'd0;
    data_memory[183] = 32'd0;
    data_memory[184] = 32'd0;
    data_memory[185] = 32'd0;
    data_memory[186] = 32'd0;
    data_memory[187] = 32'd0;
    data_memory[188] = 32'd0;
    data_memory[189] = 32'd0;
    data_memory[190] = 32'd0;
    data_memory[191] = 32'd0;
    data_memory[192] = 32'd0;
    data_memory[193] = 32'd0;
    data_memory[194] = 32'd0;
    data_memory[195] = 32'd0;
    data_memory[196] = 32'd0;
    data_memory[197] = 32'd0;
    data_memory[198] = 32'd0;
    data_memory[199] = 32'd0;
    data_memory[200] = 32'd0;
    data_memory[201] = 32'd0;
    data_memory[202] = 32'd0;
    data_memory[203] = 32'd0;
    data_memory[204] = 32'd0;
    data_memory[205] = 32'd0;
    data_memory[206] = 32'd0;
    data_memory[207] = 32'd0;
    data_memory[208] = 32'd0;
    data_memory[209] = 32'd0;
    data_memory[210] = 32'd0;
    data_memory[211] = 32'd0;
    data_memory[212] = 32'd0;
    data_memory[213] = 32'd0;
    data_memory[214] = 32'd0;
    data_memory[215] = 32'd0;
    data_memory[216] = 32'd0;
    data_memory[217] = 32'd0;
    data_memory[218] = 32'd0;
    data_memory[219] = 32'd0;
    data_memory[220] = 32'd0;
    data_memory[221] = 32'd0;
    data_memory[222] = 32'd0;
    data_memory[223] = 32'd0;
    data_memory[224] = 32'd0;
    data_memory[225] = 32'd0;
    data_memory[226] = 32'd0;
    data_memory[227] = 32'd0;
    data_memory[228] = 32'd0;
    data_memory[229] = 32'd0;
    data_memory[230] = 32'd0;
    data_memory[231] = 32'd0;
    data_memory[232] = 32'd0;
    data_memory[233] = 32'd0;
    data_memory[234] = 32'd0;
    data_memory[235] = 32'd0;
    data_memory[236] = 32'd0;
    data_memory[237] = 32'd0;
    data_memory[238] = 32'd0;
    data_memory[239] = 32'd0;
    data_memory[240] = 32'd0;
    data_memory[241] = 32'd0;
    data_memory[242] = 32'd0;
    data_memory[243] = 32'd0;
    data_memory[244] = 32'd0;
    data_memory[245] = 32'd0;
    data_memory[246] = 32'd0;
    data_memory[247] = 32'd0;
    data_memory[248] = 32'd0;
    data_memory[249] = 32'd0;
    data_memory[250] = 32'd0;
    data_memory[251] = 32'd0;
    data_memory[252] = 32'd0;
    data_memory[253] = 32'd0;
    data_memory[254] = 32'd0;
    data_memory[255] = 32'd0;
  end
  always @(posedge clk) begin
    if (write_port__en[0])
      data_memory[write_port__addr][7:0] <= write_port__data[7:0];
    if (write_port__en[1])
      data_memory[write_port__addr][15:8] <= write_port__data[15:8];
    if (write_port__en[2])
      data_memory[write_port__addr][23:16] <= write_port__data[23:16];
    if (write_port__en[3])
      data_memory[write_port__addr][31:24] <= write_port__data[31:24];
  end
  reg [31:0] _0_;
  always @(posedge clk) begin
    if (read_port__en) begin
      _0_ <= data_memory[read_port__addr];
    end
  end
  assign fe__read_data = _0_;
  assign fe__port_ready = ~ processing_request;
  assign \$1  = fe__address - 1'h0;
  assign \$2  = ~ processing_request;
  assign \$3  = fe__address >= 1'h0;
  assign \$4  = fe__request_valid & \$3 ;
  assign \$5  = fe__address < 9'h100;
  assign \$6  = \$4  & \$5 ;
  assign \$7  = | fe__write_strobe;
  assign \$8  = latency_counter + 1'h1;
  assign \$9  = | fe__write_strobe;
  assign \$10  = ~ \$9 ;
  assign \$11  = ! request_type;
  assign \$12  = latency_counter == 4'h9;
  assign \$13  = \$11  & \$12 ;
  assign \$15  = latency_counter == 4'he;
  assign \$16  = \$14  & \$15 ;
  assign \$17  = \$13  | \$16 ;
  assign \$18  = ~ request_type;
  assign \$19  = latency_counter + 1'h1;
  always @(posedge clk)
    processing_request <= \$20 ;
  always @(posedge clk)
    request_type <= \$21 ;
  always @(posedge clk)
    fe__read_data_valid <= \$22 ;
  always @(posedge clk)
    latency_counter <= \$23 ;
  always @(posedge clk)
    write_port__en <= \$24 ;
  always @(posedge clk)
    write_port__addr <= \$25 ;
  always @(posedge clk)
    write_port__data <= \$26 ;
  always @(posedge clk)
    read_port__en <= \$27 ;
  always @(posedge clk)
    read_port__addr <= \$28 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$20  = processing_request;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$20  = 1'h1;
      end
    end else begin
      if (\$17 ) begin
        \$20  = 1'h0;
      end
    end
    if (rst) begin
      \$20  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$21  = request_type;
    if (\$2 ) begin
      if (\$6 ) begin
        \$21  = \$7 ;
      end
    end
    if (rst) begin
      \$21  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$22  = fe__read_data_valid;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$22  = 1'h0;
      end
    end else begin
      if (\$17 ) begin
        \$22  = \$18 ;
      end
    end
    if (rst) begin
      \$22  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$23  = latency_counter;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$23  = \$8 [3:0];
      end
    end else begin
      (* full_case = 32'd1 *)
      if (\$17 ) begin
        \$23  = 4'h0;
      end else begin
        \$23  = \$19 [3:0];
      end
    end
    if (rst) begin
      \$23  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$24  = write_port__en;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$24  = fe__write_strobe;
      end
    end else begin
      \$24  = 4'h0;
    end
    if (rst) begin
      \$24  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$25  = write_port__addr;
    if (\$2 ) begin
      if (\$6 ) begin
        \$25  = \$1 [7:0];
      end
    end
    if (rst) begin
      \$25  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$26  = write_port__data;
    if (\$2 ) begin
      if (\$6 ) begin
        \$26  = fe__write_data;
      end
    end
    if (rst) begin
      \$26  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$27  = read_port__en;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$27  = \$10 ;
      end
    end else begin
      \$27  = 1'h0;
    end
    if (rst) begin
      \$27  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$28  = read_port__addr;
    if (\$2 ) begin
      if (\$6 ) begin
        \$28  = \$1 [7:0];
      end
    end
    if (rst) begin
      \$28  = 8'h00;
    end
  end
  assign aligned_address = \$1 [7:0];
  assign read_port__data = fe__read_data;
  assign \$14  = request_type;
endmodule
