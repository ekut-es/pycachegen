/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post100, git sha1 a1bb0255d) */

(* top =  1  *)
(* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache_wrapper.py:112" *)
(* generator = "Amaranth" *)
module CacheWrapper(fe__write_data, fe__write_strobe, fe__request_valid, fe__flush, clk, rst, fe__read_data, fe__read_data_valid, fe__port_ready, fe__flush_done, hit_o, fe__address);
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:12" *)
  wire [7:0] be__address;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:19" *)
  wire be__flush;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:20" *)
  wire be__flush_done;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:18" *)
  wire be__port_ready;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:16" *)
  wire [15:0] be__read_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  wire be__read_data_valid;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:15" *)
  wire be__request_valid;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:13" *)
  wire [15:0] be__write_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:14" *)
  wire [1:0] be__write_strobe;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:12" *)
  input [7:0] fe__address;
  wire [7:0] fe__address;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:12" *)
  wire [7:0] \fe__address$13 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:12" *)
  wire [7:0] \fe__address$22 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:19" *)
  input fe__flush;
  wire fe__flush;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:19" *)
  wire \fe__flush$14 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:19" *)
  wire \fe__flush$24 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:20" *)
  output fe__flush_done;
  wire fe__flush_done;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:20" *)
  wire \fe__flush_done$15 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:20" *)
  wire \fe__flush_done$27 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:18" *)
  output fe__port_ready;
  wire fe__port_ready;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:18" *)
  wire \fe__port_ready$16 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:18" *)
  wire \fe__port_ready$29 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:16" *)
  output [15:0] fe__read_data;
  wire [15:0] fe__read_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:16" *)
  wire [15:0] \fe__read_data$17 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:16" *)
  wire [15:0] \fe__read_data$31 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  output fe__read_data_valid;
  wire fe__read_data_valid;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  wire \fe__read_data_valid$18 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  wire \fe__read_data_valid$33 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:15" *)
  input fe__request_valid;
  wire fe__request_valid;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:15" *)
  wire \fe__request_valid$19 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:15" *)
  wire \fe__request_valid$34 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:13" *)
  input [15:0] fe__write_data;
  wire [15:0] fe__write_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:13" *)
  wire [15:0] \fe__write_data$20 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:13" *)
  wire [15:0] \fe__write_data$36 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:14" *)
  input [1:0] fe__write_strobe;
  wire [1:0] fe__write_strobe;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:14" *)
  wire [1:0] \fe__write_strobe$21 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:14" *)
  wire [1:0] \fe__write_strobe$38 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:67" *)
  output hit_o;
  wire hit_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:67" *)
  wire \hit_o$12 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache_wrapper.py:119" *)
  \CacheWrapper.l1_cache  l1_cache (
    .be__address(\fe__address$22 ),
    .be__flush(\fe__flush$24 ),
    .be__port_ready(be__port_ready),
    .be__read_data(be__read_data),
    .be__read_data_valid(be__read_data_valid),
    .be__request_valid(\fe__request_valid$34 ),
    .be__write_data(\fe__write_data$36 ),
    .be__write_strobe(\fe__write_strobe$38 ),
    .clk(clk),
    .fe__address(fe__address),
    .fe__flush(fe__flush),
    .fe__flush_done(fe__flush_done),
    .fe__port_ready(fe__port_ready),
    .fe__read_data(fe__read_data),
    .fe__read_data_valid(fe__read_data_valid),
    .fe__request_valid(fe__request_valid),
    .fe__write_data(fe__write_data),
    .fe__write_strobe(fe__write_strobe),
    .hit_o(hit_o),
    .rst(rst)
  );
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache_wrapper.py:126" *)
  \CacheWrapper.main_memory  main_memory (
    .clk(clk),
    .fe__address(\fe__address$22 ),
    .fe__port_ready(be__port_ready),
    .fe__read_data(be__read_data),
    .fe__read_data_valid(be__read_data_valid),
    .fe__request_valid(\fe__request_valid$34 ),
    .fe__write_strobe(\fe__write_strobe$38 ),
    .rst(rst),
    .write_port__data(\fe__write_data$36 )
  );
  assign \hit_o$12  = hit_o;
  assign \fe__address$13  = fe__address;
  assign \fe__flush$14  = fe__flush;
  assign \fe__flush_done$15  = fe__flush_done;
  assign \fe__port_ready$16  = fe__port_ready;
  assign \fe__read_data$17  = fe__read_data;
  assign \fe__read_data_valid$18  = fe__read_data_valid;
  assign \fe__request_valid$19  = fe__request_valid;
  assign \fe__write_data$20  = fe__write_data;
  assign \fe__write_strobe$21  = fe__write_strobe;
  assign be__address = \fe__address$22 ;
  assign be__flush = \fe__flush$24 ;
  assign be__flush_done = 1'h1;
  assign \fe__flush_done$27  = 1'h1;
  assign \fe__port_ready$29  = be__port_ready;
  assign \fe__read_data$31  = be__read_data;
  assign \fe__read_data_valid$33  = be__read_data_valid;
  assign be__request_valid = \fe__request_valid$34 ;
  assign be__write_data = \fe__write_data$36 ;
  assign be__write_strobe = \fe__write_strobe$38 ;
endmodule

(* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:74" *)
(* generator = "Amaranth" *)
module \CacheWrapper.l1_cache (fe__write_data, fe__write_strobe, fe__request_valid, fe__flush, clk, rst, hit_o, fe__port_ready, be__port_ready, be__read_data, be__write_data, be__write_strobe, be__request_valid, be__flush, fe__read_data_valid, fe__flush_done, be__address, fe__read_data, be__read_data_valid, fe__address);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  wire \$10 ;
  reg [3:0] \$100 ;
  reg \$101 ;
  reg \$102 ;
  reg [7:0] \$103 ;
  reg [1:0] \$104 ;
  reg [15:0] \$105 ;
  reg [3:0] \$106 ;
  reg [1:0] \$107 ;
  reg [7:0] \$108 ;
  reg [15:0] \$109 ;
  wire [15:0] \$11 ;
  reg [1:0] \$110 ;
  reg [3:0] \$111 ;
  reg [1:0] \$112 ;
  reg [7:0] \$113 ;
  reg [1:0] \$114 ;
  reg [3:0] \$115 ;
  reg \$116 ;
  reg [15:0] \$117 ;
  reg [3:0] \$118 ;
  reg [1:0] \$119 ;
  wire \$12 ;
  reg \$120 ;
  reg \$121 ;
  reg \$13 ;
  wire [4:0] \$134 ;
  reg \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire [4:0] \$18 ;
  wire [4:0] \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  reg [1:0] \$28 ;
  wire [4:0] \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  reg \$34 ;
  wire \$35 ;
  wire [1:0] \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire [3:0] \$39 ;
  wire \$4 ;
  wire [1:0] \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire [3:0] \$43 ;
  wire [4:0] \$44 ;
  reg [15:0] \$45 ;
  wire [1:0] \$46 ;
  wire \$47 ;
  wire [4:0] \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire [4:0] \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire [1:0] \$54 ;
  wire [4:0] \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  reg \$6 ;
  wire \$60 ;
  wire [4:0] \$61 ;
  wire \$62 ;
  wire \$63 ;
  wire \$64 ;
  wire \$65 ;
  wire \$66 ;
  wire \$67 ;
  wire \$68 ;
  wire \$69 ;
  wire \$7 ;
  wire \$70 ;
  wire \$71 ;
  wire \$72 ;
  wire \$73 ;
  wire \$74 ;
  reg [15:0] \$75 ;
  wire [4:0] \$76 ;
  wire [4:0] \$77 ;
  wire \$78 ;
  wire [2:0] \$79 ;
  wire \$8 ;
  reg \$80 ;
  reg \$81 ;
  wire \$82 ;
  reg [3:0] \$83 ;
  wire \$84 ;
  wire \$85 ;
  wire \$86 ;
  wire [3:0] \$87 ;
  wire \$88 ;
  wire \$89 ;
  wire \$9 ;
  wire \$90 ;
  wire [3:0] \$91 ;
  wire \$92 ;
  wire \$93 ;
  wire \$94 ;
  wire \$95 ;
  wire \$96 ;
  wire \$97 ;
  wire \$98 ;
  reg [3:0] \$99 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  wire [3:0] \$signature__addr$102 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  wire [3:0] \$signature__addr$103 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  wire [3:0] \$signature__addr$104 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  wire [3:0] \$signature__addr$105 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$23 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$24 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$25 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$26 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$27 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$28 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$29 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$30 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$32 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$33 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$34 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$35 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$36 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$37 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  reg [3:0] \$signature__addr$38 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$47 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$48 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$49 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$50 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$61 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$62 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$63 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$64 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$73 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$74 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$75 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  reg [3:0] \$signature__addr$76 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg [15:0] \$signature__data ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire \$signature__data$100 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire \$signature__data$101 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  wire \$signature__data$106 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  wire \$signature__data$107 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  wire \$signature__data$108 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  wire \$signature__data$109 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [3:0] \$signature__data$123 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [3:0] \$signature__data$124 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [3:0] \$signature__data$125 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [3:0] \$signature__data$126 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [15:0] \$signature__data$148 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [15:0] \$signature__data$149 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [15:0] \$signature__data$150 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [15:0] \$signature__data$151 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg [15:0] \$signature__data$52 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg [15:0] \$signature__data$53 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg [15:0] \$signature__data$54 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg \$signature__data$65 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg \$signature__data$66 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg \$signature__data$67 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg \$signature__data$68 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg [3:0] \$signature__data$77 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg [3:0] \$signature__data$78 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg [3:0] \$signature__data$79 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:402" *)
  reg [3:0] \$signature__data$80 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire \$signature__data$82 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire \$signature__data$83 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire \$signature__data$84 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire \$signature__data$85 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire \$signature__data$98 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire \$signature__data$99 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  reg \$signature__en ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  wire \$signature__en$110 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  wire \$signature__en$111 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  wire \$signature__en$112 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  wire \$signature__en$113 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  reg \$signature__en$15 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  reg \$signature__en$16 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  reg \$signature__en$17 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg [1:0] \$signature__en$43 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg [1:0] \$signature__en$44 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg [1:0] \$signature__en$45 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg [1:0] \$signature__en$46 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg \$signature__en$57 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg \$signature__en$58 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg \$signature__en$59 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg \$signature__en$60 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg \$signature__en$69 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg \$signature__en$70 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg \$signature__en$71 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg \$signature__en$72 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  wire \$signature__en$93 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  wire \$signature__en$94 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  wire \$signature__en$95 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  wire \$signature__en$96 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:20" *)
  reg access_i;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:88" *)
  output [7:0] be__address;
  reg [7:0] be__address = 8'h00;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:19" *)
  output be__flush;
  reg be__flush;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:20" *)
  wire be__flush_done;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:18" *)
  input be__port_ready;
  wire be__port_ready;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:16" *)
  input [15:0] be__read_data;
  wire [15:0] be__read_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  input be__read_data_valid;
  wire be__read_data_valid;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:15" *)
  output be__request_valid;
  reg be__request_valid;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:13" *)
  output [15:0] be__write_data;
  wire [15:0] be__write_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:14" *)
  output [1:0] be__write_strobe;
  wire [1:0] be__write_strobe;
  (* init = 8'h00 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:88" *)
  wire [7:0] be_buffer_address;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:88" *)
  wire [3:0] \be_buffer_address.index ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:88" *)
  wire [3:0] \be_buffer_address.tag ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:88" *)
  wire [-1:0] \be_buffer_address.word_offset ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:86" *)
  reg [15:0] be_buffer_write_data = 16'h0000;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:87" *)
  reg [1:0] be_buffer_write_strobe = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:144" *)
  reg be_flush_requested = 1'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:119" *)
  wire [-1:0] be_read_data_total_word_offset;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:117" *)
  reg be_read_data_word_counter = 1'h0;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:12" *)
  input [7:0] fe__address;
  wire [7:0] fe__address;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:19" *)
  input fe__flush;
  wire fe__flush;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:20" *)
  output fe__flush_done;
  reg fe__flush_done = 1'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:18" *)
  output fe__port_ready;
  wire fe__port_ready;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:16" *)
  output [15:0] fe__read_data;
  reg [15:0] fe__read_data = 16'h0000;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  output fe__read_data_valid;
  reg fe__read_data_valid = 1'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:15" *)
  input fe__request_valid;
  wire fe__request_valid;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:13" *)
  input [15:0] fe__write_data;
  wire [15:0] fe__write_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:14" *)
  input [1:0] fe__write_strobe;
  wire [1:0] fe__write_strobe;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:76" *)
  reg [7:0] fe_buffer_address = 8'h00;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:76" *)
  wire [3:0] \fe_buffer_address.index ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:76" *)
  wire [3:0] \fe_buffer_address.tag ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:76" *)
  wire [-1:0] \fe_buffer_address.word_offset ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:80" *)
  reg fe_buffer_flush = 1'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:78" *)
  reg [15:0] fe_buffer_write_data = 16'h0000;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:79" *)
  reg [1:0] fe_buffer_write_strobe = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:142" *)
  reg [1:0] flush_block_index = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:140" *)
  reg [3:0] flush_set_index = 4'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:109" *)
  wire [1:0] hit_index;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:67" *)
  output hit_o;
  wire hit_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:105" *)
  reg [3:0] hit_vector = 4'h0;
  (* init = 4'h0 *)
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/coding.py:41" *)
  wire [3:0] i;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:101" *)
  reg [3:0] latency_counter = 4'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:150" *)
  reg [1:0] next_block_replacement = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_0_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_10_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_11_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_12_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_13_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_14_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_15_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_1_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_2_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_3_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_4_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_5_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_6_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_7_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_8_o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:27" *)
  wire [1:0] next_replacement_9_o;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/coding.py:42" *)
  wire [1:0] o;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:135" *)
  wire [-1:0] read_block_word_offset;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:138" *)
  reg [1:0] read_data_mem_select = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:21" *)
  reg replace_i;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* enum_base_type = "States" *)
  (* enum_value_0000 = "READY" *)
  (* enum_value_0001 = "HIT_LOOKUP" *)
  (* enum_value_0010 = "HIT_LOOKUP_DONE" *)
  (* enum_value_0011 = "WRITE_BACK_BLOCK" *)
  (* enum_value_0100 = "READ_BLOCK" *)
  (* enum_value_0101 = "READ_BLOCK_DONE" *)
  (* enum_value_0110 = "SEND_MEM_REQUEST" *)
  (* enum_value_0111 = "SEND_MEM_REQUEST_WAIT" *)
  (* enum_value_1000 = "STALL" *)
  (* enum_value_1001 = "FLUSH_CACHE" *)
  (* enum_value_1010 = "FLUSH_BACKEND" *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:99" *)
  reg [3:0] send_mem_request_next_state = 4'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:22" *)
  reg [3:0] set_i;
  (* enum_base_type = "States" *)
  (* enum_value_0000 = "READY" *)
  (* enum_value_0001 = "HIT_LOOKUP" *)
  (* enum_value_0010 = "HIT_LOOKUP_DONE" *)
  (* enum_value_0011 = "WRITE_BACK_BLOCK" *)
  (* enum_value_0100 = "READ_BLOCK" *)
  (* enum_value_0101 = "READ_BLOCK_DONE" *)
  (* enum_value_0110 = "SEND_MEM_REQUEST" *)
  (* enum_value_0111 = "SEND_MEM_REQUEST_WAIT" *)
  (* enum_value_1000 = "STALL" *)
  (* enum_value_1001 = "FLUSH_CACHE" *)
  (* enum_value_1010 = "FLUSH_BACKEND" *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:97" *)
  reg [3:0] state = 4'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:23" *)
  reg [1:0] way_i;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:193" *)
  reg [7:0] write_back_address = 8'h00;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:193" *)
  wire [3:0] \write_back_address.index ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:193" *)
  wire [3:0] \write_back_address.tag ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:193" *)
  wire [-1:0] \write_back_address.word_offset ;
  (* enum_base_type = "States" *)
  (* enum_value_0000 = "READY" *)
  (* enum_value_0001 = "HIT_LOOKUP" *)
  (* enum_value_0010 = "HIT_LOOKUP_DONE" *)
  (* enum_value_0011 = "WRITE_BACK_BLOCK" *)
  (* enum_value_0100 = "READ_BLOCK" *)
  (* enum_value_0101 = "READ_BLOCK_DONE" *)
  (* enum_value_0110 = "SEND_MEM_REQUEST" *)
  (* enum_value_0111 = "SEND_MEM_REQUEST_WAIT" *)
  (* enum_value_1000 = "STALL" *)
  (* enum_value_1001 = "FLUSH_CACHE" *)
  (* enum_value_1010 = "FLUSH_BACKEND" *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:196" *)
  reg [3:0] write_back_next_state = 4'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:194" *)
  reg [1:0] write_back_way = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:175" *)
  reg [15:0] data_mem_0 [15:0];
  initial begin
    data_mem_0[0] = 16'h0000;
    data_mem_0[1] = 16'h0000;
    data_mem_0[2] = 16'h0000;
    data_mem_0[3] = 16'h0000;
    data_mem_0[4] = 16'h0000;
    data_mem_0[5] = 16'h0000;
    data_mem_0[6] = 16'h0000;
    data_mem_0[7] = 16'h0000;
    data_mem_0[8] = 16'h0000;
    data_mem_0[9] = 16'h0000;
    data_mem_0[10] = 16'h0000;
    data_mem_0[11] = 16'h0000;
    data_mem_0[12] = 16'h0000;
    data_mem_0[13] = 16'h0000;
    data_mem_0[14] = 16'h0000;
    data_mem_0[15] = 16'h0000;
  end
  always @(posedge clk) begin
    if (\$signature__en$43 [0])
      data_mem_0[\$signature__addr$47 ][7:0] <= \$signature__data [7:0];
    if (\$signature__en$43 [1])
      data_mem_0[\$signature__addr$47 ][15:8] <= \$signature__data [15:8];
  end
  reg [15:0] _0_;
  always @(posedge clk) begin
    if (\$signature__en ) begin
      _0_ <= data_mem_0[\$signature__addr$30 ];
    end
  end
  assign \$signature__data$148  = _0_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:175" *)
  reg [15:0] data_mem_1 [15:0];
  initial begin
    data_mem_1[0] = 16'h0000;
    data_mem_1[1] = 16'h0000;
    data_mem_1[2] = 16'h0000;
    data_mem_1[3] = 16'h0000;
    data_mem_1[4] = 16'h0000;
    data_mem_1[5] = 16'h0000;
    data_mem_1[6] = 16'h0000;
    data_mem_1[7] = 16'h0000;
    data_mem_1[8] = 16'h0000;
    data_mem_1[9] = 16'h0000;
    data_mem_1[10] = 16'h0000;
    data_mem_1[11] = 16'h0000;
    data_mem_1[12] = 16'h0000;
    data_mem_1[13] = 16'h0000;
    data_mem_1[14] = 16'h0000;
    data_mem_1[15] = 16'h0000;
  end
  always @(posedge clk) begin
    if (\$signature__en$44 [0])
      data_mem_1[\$signature__addr$48 ][7:0] <= \$signature__data$52 [7:0];
    if (\$signature__en$44 [1])
      data_mem_1[\$signature__addr$48 ][15:8] <= \$signature__data$52 [15:8];
  end
  reg [15:0] _1_;
  always @(posedge clk) begin
    if (\$signature__en$15 ) begin
      _1_ <= data_mem_1[\$signature__addr$33 ];
    end
  end
  assign \$signature__data$149  = _1_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:175" *)
  reg [15:0] data_mem_2 [15:0];
  initial begin
    data_mem_2[0] = 16'h0000;
    data_mem_2[1] = 16'h0000;
    data_mem_2[2] = 16'h0000;
    data_mem_2[3] = 16'h0000;
    data_mem_2[4] = 16'h0000;
    data_mem_2[5] = 16'h0000;
    data_mem_2[6] = 16'h0000;
    data_mem_2[7] = 16'h0000;
    data_mem_2[8] = 16'h0000;
    data_mem_2[9] = 16'h0000;
    data_mem_2[10] = 16'h0000;
    data_mem_2[11] = 16'h0000;
    data_mem_2[12] = 16'h0000;
    data_mem_2[13] = 16'h0000;
    data_mem_2[14] = 16'h0000;
    data_mem_2[15] = 16'h0000;
  end
  always @(posedge clk) begin
    if (\$signature__en$45 [0])
      data_mem_2[\$signature__addr$49 ][7:0] <= \$signature__data$53 [7:0];
    if (\$signature__en$45 [1])
      data_mem_2[\$signature__addr$49 ][15:8] <= \$signature__data$53 [15:8];
  end
  reg [15:0] _2_;
  always @(posedge clk) begin
    if (\$signature__en$16 ) begin
      _2_ <= data_mem_2[\$signature__addr$35 ];
    end
  end
  assign \$signature__data$150  = _2_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:175" *)
  reg [15:0] data_mem_3 [15:0];
  initial begin
    data_mem_3[0] = 16'h0000;
    data_mem_3[1] = 16'h0000;
    data_mem_3[2] = 16'h0000;
    data_mem_3[3] = 16'h0000;
    data_mem_3[4] = 16'h0000;
    data_mem_3[5] = 16'h0000;
    data_mem_3[6] = 16'h0000;
    data_mem_3[7] = 16'h0000;
    data_mem_3[8] = 16'h0000;
    data_mem_3[9] = 16'h0000;
    data_mem_3[10] = 16'h0000;
    data_mem_3[11] = 16'h0000;
    data_mem_3[12] = 16'h0000;
    data_mem_3[13] = 16'h0000;
    data_mem_3[14] = 16'h0000;
    data_mem_3[15] = 16'h0000;
  end
  always @(posedge clk) begin
    if (\$signature__en$46 [0])
      data_mem_3[\$signature__addr$50 ][7:0] <= \$signature__data$54 [7:0];
    if (\$signature__en$46 [1])
      data_mem_3[\$signature__addr$50 ][15:8] <= \$signature__data$54 [15:8];
  end
  reg [15:0] _3_;
  always @(posedge clk) begin
    if (\$signature__en$17 ) begin
      _3_ <= data_mem_3[\$signature__addr$37 ];
    end
  end
  assign \$signature__data$151  = _3_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:167" *)
  reg [0:0] dirty_mem_0 [15:0];
  initial begin
    dirty_mem_0[0] = 1'h0;
    dirty_mem_0[1] = 1'h0;
    dirty_mem_0[2] = 1'h0;
    dirty_mem_0[3] = 1'h0;
    dirty_mem_0[4] = 1'h0;
    dirty_mem_0[5] = 1'h0;
    dirty_mem_0[6] = 1'h0;
    dirty_mem_0[7] = 1'h0;
    dirty_mem_0[8] = 1'h0;
    dirty_mem_0[9] = 1'h0;
    dirty_mem_0[10] = 1'h0;
    dirty_mem_0[11] = 1'h0;
    dirty_mem_0[12] = 1'h0;
    dirty_mem_0[13] = 1'h0;
    dirty_mem_0[14] = 1'h0;
    dirty_mem_0[15] = 1'h0;
  end
  always @(posedge clk) begin
  end
  reg [0:0] _4_;
  always @(posedge clk) begin
    _4_ <= dirty_mem_0[\$signature__addr$32 ];
  end
  assign \$signature__data$82  = _4_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:167" *)
  reg [0:0] dirty_mem_1 [15:0];
  initial begin
    dirty_mem_1[0] = 1'h0;
    dirty_mem_1[1] = 1'h0;
    dirty_mem_1[2] = 1'h0;
    dirty_mem_1[3] = 1'h0;
    dirty_mem_1[4] = 1'h0;
    dirty_mem_1[5] = 1'h0;
    dirty_mem_1[6] = 1'h0;
    dirty_mem_1[7] = 1'h0;
    dirty_mem_1[8] = 1'h0;
    dirty_mem_1[9] = 1'h0;
    dirty_mem_1[10] = 1'h0;
    dirty_mem_1[11] = 1'h0;
    dirty_mem_1[12] = 1'h0;
    dirty_mem_1[13] = 1'h0;
    dirty_mem_1[14] = 1'h0;
    dirty_mem_1[15] = 1'h0;
  end
  always @(posedge clk) begin
  end
  reg [0:0] _5_;
  always @(posedge clk) begin
    _5_ <= dirty_mem_1[\$signature__addr$34 ];
  end
  assign \$signature__data$83  = _5_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:167" *)
  reg [0:0] dirty_mem_2 [15:0];
  initial begin
    dirty_mem_2[0] = 1'h0;
    dirty_mem_2[1] = 1'h0;
    dirty_mem_2[2] = 1'h0;
    dirty_mem_2[3] = 1'h0;
    dirty_mem_2[4] = 1'h0;
    dirty_mem_2[5] = 1'h0;
    dirty_mem_2[6] = 1'h0;
    dirty_mem_2[7] = 1'h0;
    dirty_mem_2[8] = 1'h0;
    dirty_mem_2[9] = 1'h0;
    dirty_mem_2[10] = 1'h0;
    dirty_mem_2[11] = 1'h0;
    dirty_mem_2[12] = 1'h0;
    dirty_mem_2[13] = 1'h0;
    dirty_mem_2[14] = 1'h0;
    dirty_mem_2[15] = 1'h0;
  end
  always @(posedge clk) begin
  end
  reg [0:0] _6_;
  always @(posedge clk) begin
    _6_ <= dirty_mem_2[\$signature__addr$36 ];
  end
  assign \$signature__data$84  = _6_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:167" *)
  reg [0:0] dirty_mem_3 [15:0];
  initial begin
    dirty_mem_3[0] = 1'h0;
    dirty_mem_3[1] = 1'h0;
    dirty_mem_3[2] = 1'h0;
    dirty_mem_3[3] = 1'h0;
    dirty_mem_3[4] = 1'h0;
    dirty_mem_3[5] = 1'h0;
    dirty_mem_3[6] = 1'h0;
    dirty_mem_3[7] = 1'h0;
    dirty_mem_3[8] = 1'h0;
    dirty_mem_3[9] = 1'h0;
    dirty_mem_3[10] = 1'h0;
    dirty_mem_3[11] = 1'h0;
    dirty_mem_3[12] = 1'h0;
    dirty_mem_3[13] = 1'h0;
    dirty_mem_3[14] = 1'h0;
    dirty_mem_3[15] = 1'h0;
  end
  always @(posedge clk) begin
  end
  reg [0:0] _7_;
  always @(posedge clk) begin
    _7_ <= dirty_mem_3[\$signature__addr$38 ];
  end
  assign \$signature__data$85  = _7_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:171" *)
  reg [3:0] tag_mem_0 [15:0];
  initial begin
    tag_mem_0[0] = 4'h0;
    tag_mem_0[1] = 4'h0;
    tag_mem_0[2] = 4'h0;
    tag_mem_0[3] = 4'h0;
    tag_mem_0[4] = 4'h0;
    tag_mem_0[5] = 4'h0;
    tag_mem_0[6] = 4'h0;
    tag_mem_0[7] = 4'h0;
    tag_mem_0[8] = 4'h0;
    tag_mem_0[9] = 4'h0;
    tag_mem_0[10] = 4'h0;
    tag_mem_0[11] = 4'h0;
    tag_mem_0[12] = 4'h0;
    tag_mem_0[13] = 4'h0;
    tag_mem_0[14] = 4'h0;
    tag_mem_0[15] = 4'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$69 )
      tag_mem_0[\$signature__addr$73 ] <= \$signature__data$77 ;
  end
  reg [3:0] _8_;
  always @(posedge clk) begin
    _8_ <= tag_mem_0[\$signature__addr$23 ];
  end
  assign \$signature__data$123  = _8_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:171" *)
  reg [3:0] tag_mem_1 [15:0];
  initial begin
    tag_mem_1[0] = 4'h0;
    tag_mem_1[1] = 4'h0;
    tag_mem_1[2] = 4'h0;
    tag_mem_1[3] = 4'h0;
    tag_mem_1[4] = 4'h0;
    tag_mem_1[5] = 4'h0;
    tag_mem_1[6] = 4'h0;
    tag_mem_1[7] = 4'h0;
    tag_mem_1[8] = 4'h0;
    tag_mem_1[9] = 4'h0;
    tag_mem_1[10] = 4'h0;
    tag_mem_1[11] = 4'h0;
    tag_mem_1[12] = 4'h0;
    tag_mem_1[13] = 4'h0;
    tag_mem_1[14] = 4'h0;
    tag_mem_1[15] = 4'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$70 )
      tag_mem_1[\$signature__addr$74 ] <= \$signature__data$78 ;
  end
  reg [3:0] _9_;
  always @(posedge clk) begin
    _9_ <= tag_mem_1[\$signature__addr$25 ];
  end
  assign \$signature__data$124  = _9_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:171" *)
  reg [3:0] tag_mem_2 [15:0];
  initial begin
    tag_mem_2[0] = 4'h0;
    tag_mem_2[1] = 4'h0;
    tag_mem_2[2] = 4'h0;
    tag_mem_2[3] = 4'h0;
    tag_mem_2[4] = 4'h0;
    tag_mem_2[5] = 4'h0;
    tag_mem_2[6] = 4'h0;
    tag_mem_2[7] = 4'h0;
    tag_mem_2[8] = 4'h0;
    tag_mem_2[9] = 4'h0;
    tag_mem_2[10] = 4'h0;
    tag_mem_2[11] = 4'h0;
    tag_mem_2[12] = 4'h0;
    tag_mem_2[13] = 4'h0;
    tag_mem_2[14] = 4'h0;
    tag_mem_2[15] = 4'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$71 )
      tag_mem_2[\$signature__addr$75 ] <= \$signature__data$79 ;
  end
  reg [3:0] _10_;
  always @(posedge clk) begin
    _10_ <= tag_mem_2[\$signature__addr$27 ];
  end
  assign \$signature__data$125  = _10_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:171" *)
  reg [3:0] tag_mem_3 [15:0];
  initial begin
    tag_mem_3[0] = 4'h0;
    tag_mem_3[1] = 4'h0;
    tag_mem_3[2] = 4'h0;
    tag_mem_3[3] = 4'h0;
    tag_mem_3[4] = 4'h0;
    tag_mem_3[5] = 4'h0;
    tag_mem_3[6] = 4'h0;
    tag_mem_3[7] = 4'h0;
    tag_mem_3[8] = 4'h0;
    tag_mem_3[9] = 4'h0;
    tag_mem_3[10] = 4'h0;
    tag_mem_3[11] = 4'h0;
    tag_mem_3[12] = 4'h0;
    tag_mem_3[13] = 4'h0;
    tag_mem_3[14] = 4'h0;
    tag_mem_3[15] = 4'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$72 )
      tag_mem_3[\$signature__addr$76 ] <= \$signature__data$80 ;
  end
  reg [3:0] _11_;
  always @(posedge clk) begin
    _11_ <= tag_mem_3[\$signature__addr$29 ];
  end
  assign \$signature__data$126  = _11_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:163" *)
  reg [0:0] valid_mem_0 [15:0];
  initial begin
    valid_mem_0[0] = 1'h0;
    valid_mem_0[1] = 1'h0;
    valid_mem_0[2] = 1'h0;
    valid_mem_0[3] = 1'h0;
    valid_mem_0[4] = 1'h0;
    valid_mem_0[5] = 1'h0;
    valid_mem_0[6] = 1'h0;
    valid_mem_0[7] = 1'h0;
    valid_mem_0[8] = 1'h0;
    valid_mem_0[9] = 1'h0;
    valid_mem_0[10] = 1'h0;
    valid_mem_0[11] = 1'h0;
    valid_mem_0[12] = 1'h0;
    valid_mem_0[13] = 1'h0;
    valid_mem_0[14] = 1'h0;
    valid_mem_0[15] = 1'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$57 )
      valid_mem_0[\$signature__addr$61 ] <= \$signature__data$65 ;
  end
  reg [0:0] _12_;
  always @(posedge clk) begin
    _12_ <= valid_mem_0[\$signature__addr ];
  end
  assign \$signature__data$98  = _12_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:163" *)
  reg [0:0] valid_mem_1 [15:0];
  initial begin
    valid_mem_1[0] = 1'h0;
    valid_mem_1[1] = 1'h0;
    valid_mem_1[2] = 1'h0;
    valid_mem_1[3] = 1'h0;
    valid_mem_1[4] = 1'h0;
    valid_mem_1[5] = 1'h0;
    valid_mem_1[6] = 1'h0;
    valid_mem_1[7] = 1'h0;
    valid_mem_1[8] = 1'h0;
    valid_mem_1[9] = 1'h0;
    valid_mem_1[10] = 1'h0;
    valid_mem_1[11] = 1'h0;
    valid_mem_1[12] = 1'h0;
    valid_mem_1[13] = 1'h0;
    valid_mem_1[14] = 1'h0;
    valid_mem_1[15] = 1'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$58 )
      valid_mem_1[\$signature__addr$62 ] <= \$signature__data$66 ;
  end
  reg [0:0] _13_;
  always @(posedge clk) begin
    _13_ <= valid_mem_1[\$signature__addr$24 ];
  end
  assign \$signature__data$99  = _13_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:163" *)
  reg [0:0] valid_mem_2 [15:0];
  initial begin
    valid_mem_2[0] = 1'h0;
    valid_mem_2[1] = 1'h0;
    valid_mem_2[2] = 1'h0;
    valid_mem_2[3] = 1'h0;
    valid_mem_2[4] = 1'h0;
    valid_mem_2[5] = 1'h0;
    valid_mem_2[6] = 1'h0;
    valid_mem_2[7] = 1'h0;
    valid_mem_2[8] = 1'h0;
    valid_mem_2[9] = 1'h0;
    valid_mem_2[10] = 1'h0;
    valid_mem_2[11] = 1'h0;
    valid_mem_2[12] = 1'h0;
    valid_mem_2[13] = 1'h0;
    valid_mem_2[14] = 1'h0;
    valid_mem_2[15] = 1'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$59 )
      valid_mem_2[\$signature__addr$63 ] <= \$signature__data$67 ;
  end
  reg [0:0] _14_;
  always @(posedge clk) begin
    _14_ <= valid_mem_2[\$signature__addr$26 ];
  end
  assign \$signature__data$100  = _14_;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:163" *)
  reg [0:0] valid_mem_3 [15:0];
  initial begin
    valid_mem_3[0] = 1'h0;
    valid_mem_3[1] = 1'h0;
    valid_mem_3[2] = 1'h0;
    valid_mem_3[3] = 1'h0;
    valid_mem_3[4] = 1'h0;
    valid_mem_3[5] = 1'h0;
    valid_mem_3[6] = 1'h0;
    valid_mem_3[7] = 1'h0;
    valid_mem_3[8] = 1'h0;
    valid_mem_3[9] = 1'h0;
    valid_mem_3[10] = 1'h0;
    valid_mem_3[11] = 1'h0;
    valid_mem_3[12] = 1'h0;
    valid_mem_3[13] = 1'h0;
    valid_mem_3[14] = 1'h0;
    valid_mem_3[15] = 1'h0;
  end
  always @(posedge clk) begin
    if (\$signature__en$60 )
      valid_mem_3[\$signature__addr$64 ] <= \$signature__data$68 ;
  end
  reg [0:0] _15_;
  always @(posedge clk) begin
    _15_ <= valid_mem_3[\$signature__addr$28 ];
  end
  assign \$signature__data$101  = _15_;
  assign hit_o = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:107" *) hit_vector;
  assign fe__port_ready = ! (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:146" *) state;
  assign \$1  = fe__flush | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:211" *) fe_buffer_flush;
  assign \$2  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:248" *) hit_vector;
  assign \$3  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:254" *) fe_buffer_write_strobe;
  assign \$4  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:276" *) fe_buffer_write_strobe;
  assign \$8  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:343" *) be_buffer_write_strobe;
  assign \$9  = \$8  | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:343" *) be__read_data_valid;
  assign \$10  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:346" *) be_buffer_write_strobe;
  assign \$12  = | (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_dsl.py:555" *) fe_buffer_write_strobe;
  assign \$15  = \$13  & (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ast.py:2413" *) \$14 ;
  assign \$16  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:474" *) be_flush_requested;
  assign \$17  = fe__flush | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:211" *) fe_buffer_flush;
  assign \$18  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:215" *) 1'h1;
  assign \$19  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:231" *) 1'h1;
  assign \$20  = \$signature__data$123  == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:235" *) fe_buffer_address[7:4];
  assign \$21  = \$20  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:235" *) \$signature__data$98 ;
  assign \$22  = \$signature__data$124  == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:235" *) fe_buffer_address[7:4];
  assign \$23  = \$22  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:235" *) \$signature__data$99 ;
  assign \$24  = \$signature__data$125  == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:235" *) fe_buffer_address[7:4];
  assign \$25  = \$24  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:235" *) \$signature__data$100 ;
  assign \$26  = \$signature__data$126  == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:235" *) fe_buffer_address[7:4];
  assign \$27  = \$26  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:235" *) \$signature__data$101 ;
  assign \$29  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:247" *) 1'h1;
  assign \$30  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:248" *) hit_vector;
  assign \$31  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:254" *) fe_buffer_write_strobe;
  assign \$32  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:276" *) fe_buffer_write_strobe;
  assign \$36  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:286" *) fe_buffer_write_strobe;
  assign \$37  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:286" *) \$36 ;
  assign \$39  = \$38  ? (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:287" *) 4'h4 : 4'h5;
  assign \$40  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:286" *) fe_buffer_write_strobe;
  assign \$41  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:286" *) \$40 ;
  assign \$43  = \$42  ? (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:287" *) 4'h4 : 4'h5;
  assign \$44  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:321" *) 1'h1;
  assign \$48  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:339" *) 1'h1;
  assign \$49  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:343" *) be_buffer_write_strobe;
  assign \$50  = \$49  | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:343" *) be__read_data_valid;
  assign \$51  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:345" *) 1'h1;
  assign \$52  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:346" *) be_buffer_write_strobe;
  assign \$53  = ! (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:353" *) be_read_data_word_counter;
  assign \$54  = be_read_data_word_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:359" *) 1'h1;
  assign \$55  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:365" *) 1'h1;
  assign \$57  = & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:378" *) fe_buffer_write_strobe;
  assign \$61  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:386" *) 1'h1;
  assign \$62  = | (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_dsl.py:555" *) fe_buffer_write_strobe;
  assign \$63  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:408" *) hit_vector;
  assign \$64  = latency_counter == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:408" *) 4'h9;
  assign \$66  = \$63  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:408" *) \$65 ;
  assign \$67  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:409" *) hit_vector;
  assign \$68  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:409" *) \$67 ;
  assign \$69  = latency_counter == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:409" *) 4'he;
  assign \$71  = \$68  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:409" *) \$70 ;
  assign \$72  = \$66  | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:410" *) \$71 ;
  assign \$73  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:413" *) fe_buffer_write_strobe;
  assign \$74  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:413" *) \$73 ;
  assign \$76  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:423" *) 1'h1;
  assign \$77  = flush_set_index + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:443" *) 1'h1;
  assign \$78  = flush_set_index == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:444" *) 4'hf;
  assign \$79  = flush_block_index + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:445" *) 1'h1;
  assign \$82  = \$80  & (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ast.py:2413" *) \$81 ;
  assign \$84  = flush_set_index == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:448" *) 4'hf;
  assign \$85  = flush_block_index == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:448" *) 2'h3;
  assign \$86  = \$84  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:448" *) \$85 ;
  assign \$87  = \$86  ? (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:450" *) 4'ha : 4'h9;
  assign \$88  = flush_set_index == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:448" *) 4'hf;
  assign \$89  = flush_block_index == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:448" *) 2'h3;
  assign \$90  = \$88  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:448" *) \$89 ;
  assign \$91  = \$90  ? (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:450" *) 4'ha : 4'h9;
  assign \$92  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:474" *) be_flush_requested;
  assign \$93  = state != (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:488" *) 4'h9;
  assign \$94  = state != (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:488" *) 1'h1;
  assign \$95  = \$93  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:488" *) \$94 ;
  assign \$96  = state != (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:488" *) 4'ha;
  assign \$97  = \$95  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:488" *) \$96 ;
  assign \$98  = fe_buffer_flush | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:490" *) fe__flush;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:97" *)
  always @(posedge clk)
    state <= \$99 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:101" *)
  always @(posedge clk)
    latency_counter <= \$100 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  always @(posedge clk)
    fe__read_data_valid <= \$101 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:20" *)
  always @(posedge clk)
    fe__flush_done <= \$102 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:76" *)
  always @(posedge clk)
    fe_buffer_address <= \$103 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:79" *)
  always @(posedge clk)
    fe_buffer_write_strobe <= \$104 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:78" *)
  always @(posedge clk)
    fe_buffer_write_data <= \$105 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:105" *)
  always @(posedge clk)
    hit_vector <= \$106 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:150" *)
  always @(posedge clk)
    next_block_replacement <= \$107 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:88" *)
  always @(posedge clk)
    be__address <= \$108 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:86" *)
  always @(posedge clk)
    be_buffer_write_data <= \$109 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:87" *)
  always @(posedge clk)
    be_buffer_write_strobe <= \$110 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:99" *)
  always @(posedge clk)
    send_mem_request_next_state <= \$111 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:138" *)
  always @(posedge clk)
    read_data_mem_select <= \$112 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:193" *)
  always @(posedge clk)
    write_back_address <= \$113 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:194" *)
  always @(posedge clk)
    write_back_way <= \$114 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:196" *)
  always @(posedge clk)
    write_back_next_state <= \$115 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:117" *)
  always @(posedge clk)
    be_read_data_word_counter <= \$116 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:16" *)
  always @(posedge clk)
    fe__read_data <= \$117 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:140" *)
  always @(posedge clk)
    flush_set_index <= \$118 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:142" *)
  always @(posedge clk)
    flush_block_index <= \$119 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:144" *)
  always @(posedge clk)
    be_flush_requested <= \$120 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:80" *)
  always @(posedge clk)
    fe_buffer_flush <= \$121 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:110" *)
  \CacheWrapper.l1_cache.hit_index_encoder  hit_index_encoder (
    .i(hit_vector),
    .o(hit_index)
  );
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/cache.py:151" *)
  \CacheWrapper.l1_cache.replacement_policy  replacement_policy (
    .clk(clk),
    .next_replacement_0_o(next_replacement_0_o),
    .next_replacement_10_o(next_replacement_10_o),
    .next_replacement_11_o(next_replacement_11_o),
    .next_replacement_12_o(next_replacement_12_o),
    .next_replacement_13_o(next_replacement_13_o),
    .next_replacement_14_o(next_replacement_14_o),
    .next_replacement_15_o(next_replacement_15_o),
    .next_replacement_1_o(next_replacement_1_o),
    .next_replacement_2_o(next_replacement_2_o),
    .next_replacement_3_o(next_replacement_3_o),
    .next_replacement_4_o(next_replacement_4_o),
    .next_replacement_5_o(next_replacement_5_o),
    .next_replacement_6_o(next_replacement_6_o),
    .next_replacement_7_o(next_replacement_7_o),
    .next_replacement_8_o(next_replacement_8_o),
    .next_replacement_9_o(next_replacement_9_o),
    .replace_i(replace_i),
    .rst(rst),
    .set_i(set_i)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_block_replacement)
      2'h0:
          \$6  = \$signature__data$82 ;
      2'h1:
          \$6  = \$signature__data$83 ;
      2'h2:
          \$6  = \$signature__data$84 ;
      2'h3:
          \$6  = \$signature__data$85 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      2'h0:
          \$13  = \$signature__data$82 ;
      2'h1:
          \$13  = \$signature__data$83 ;
      2'h2:
          \$13  = \$signature__data$84 ;
      2'h3:
          \$13  = \$signature__data$85 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      2'h0:
          \$14  = \$signature__data$98 ;
      2'h1:
          \$14  = \$signature__data$99 ;
      2'h2:
          \$14  = \$signature__data$100 ;
      2'h3:
          \$14  = \$signature__data$101 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fe_buffer_address[3:0])
      4'h0:
          \$28  = next_replacement_0_o;
      4'h1:
          \$28  = next_replacement_1_o;
      4'h2:
          \$28  = next_replacement_2_o;
      4'h3:
          \$28  = next_replacement_3_o;
      4'h4:
          \$28  = next_replacement_4_o;
      4'h5:
          \$28  = next_replacement_5_o;
      4'h6:
          \$28  = next_replacement_6_o;
      4'h7:
          \$28  = next_replacement_7_o;
      4'h8:
          \$28  = next_replacement_8_o;
      4'h9:
          \$28  = next_replacement_9_o;
      4'ha:
          \$28  = next_replacement_10_o;
      4'hb:
          \$28  = next_replacement_11_o;
      4'hc:
          \$28  = next_replacement_12_o;
      4'hd:
          \$28  = next_replacement_13_o;
      4'he:
          \$28  = next_replacement_14_o;
      4'hf:
          \$28  = next_replacement_15_o;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_block_replacement)
      2'h0:
          \$34  = \$signature__data$82 ;
      2'h1:
          \$34  = \$signature__data$83 ;
      2'h2:
          \$34  = \$signature__data$84 ;
      2'h3:
          \$34  = \$signature__data$85 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (write_back_way)
      2'h0:
          \$45  = \$signature__data$148 ;
      2'h1:
          \$45  = \$signature__data$149 ;
      2'h2:
          \$45  = \$signature__data$150 ;
      2'h3:
          \$45  = \$signature__data$151 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (read_data_mem_select)
      2'h0:
          \$75  = \$signature__data$148 ;
      2'h1:
          \$75  = \$signature__data$149 ;
      2'h2:
          \$75  = \$signature__data$150 ;
      2'h3:
          \$75  = \$signature__data$151 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      2'h0:
          \$80  = \$signature__data$82 ;
      2'h1:
          \$80  = \$signature__data$83 ;
      2'h2:
          \$80  = \$signature__data$84 ;
      2'h3:
          \$80  = \$signature__data$85 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      2'h0:
          \$81  = \$signature__data$98 ;
      2'h1:
          \$81  = \$signature__data$99 ;
      2'h2:
          \$81  = \$signature__data$100 ;
      2'h3:
          \$81  = \$signature__data$101 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (flush_block_index)
      2'h0:
          \$83  = \$signature__data$123 ;
      2'h1:
          \$83  = \$signature__data$124 ;
      2'h2:
          \$83  = \$signature__data$125 ;
      2'h3:
          \$83  = \$signature__data$126 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__en  = 1'h1;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
            end else begin
              casez (hit_index)
                2'h0:
                    \$signature__en  = 1'h1;
              endcase
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              if (\$7 ) begin
                casez (next_block_replacement)
                  2'h0:
                      \$signature__en  = 1'h1;
                endcase
              end
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            casez (next_block_replacement)
              2'h0:
                  \$signature__en  = 1'h1;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$15  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__en$15  = 1'h1;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
            end else begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__en$15  = 1'h1;
              endcase
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              if (\$7 ) begin
                casez (next_block_replacement)
                  2'h0:
                      /* empty */;
                  2'h1:
                      \$signature__en$15  = 1'h1;
                endcase
              end
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  \$signature__en$15  = 1'h1;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$16  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__en$16  = 1'h1;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
            end else begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__en$16  = 1'h1;
              endcase
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              if (\$7 ) begin
                casez (next_block_replacement)
                  2'h0:
                      /* empty */;
                  2'h1:
                      /* empty */;
                  2'h2:
                      \$signature__en$16  = 1'h1;
                endcase
              end
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  \$signature__en$16  = 1'h1;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$17  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__en$17  = 1'h1;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__en$17  = 1'h1;
              endcase
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              if (\$7 ) begin
                (* full_case = 32'd1 *)
                casez (next_block_replacement)
                  2'h0:
                      /* empty */;
                  2'h1:
                      /* empty */;
                  2'h2:
                      /* empty */;
                  2'h3:
                      \$signature__en$17  = 1'h1;
                endcase
              end
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            (* full_case = 32'd1 *)
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  /* empty */;
              2'h3:
                  \$signature__en$17  = 1'h1;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr  = 4'h0;
    casez (state)
      4'h0:
          if (\$1 ) begin
          end else if (fe__request_valid) begin
            \$signature__addr  = fe__address[3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$23  = 4'h0;
    casez (state)
      4'h0:
          if (\$1 ) begin
          end else if (fe__request_valid) begin
            \$signature__addr$23  = fe__address[3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$24  = 4'h0;
    casez (state)
      4'h0:
          if (\$1 ) begin
          end else if (fe__request_valid) begin
            \$signature__addr$24  = fe__address[3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$25  = 4'h0;
    casez (state)
      4'h0:
          if (\$1 ) begin
          end else if (fe__request_valid) begin
            \$signature__addr$25  = fe__address[3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$26  = 4'h0;
    casez (state)
      4'h0:
          if (\$1 ) begin
          end else if (fe__request_valid) begin
            \$signature__addr$26  = fe__address[3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$27  = 4'h0;
    casez (state)
      4'h0:
          if (\$1 ) begin
          end else if (fe__request_valid) begin
            \$signature__addr$27  = fe__address[3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$28  = 4'h0;
    casez (state)
      4'h0:
          if (\$1 ) begin
          end else if (fe__request_valid) begin
            \$signature__addr$28  = fe__address[3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$29  = 4'h0;
    casez (state)
      4'h0:
          if (\$1 ) begin
          end else if (fe__request_valid) begin
            \$signature__addr$29  = fe__address[3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$30  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__addr$30  = fe_buffer_address[3:0];
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
            end else begin
              casez (hit_index)
                2'h0:
                    \$signature__addr$30  = fe_buffer_address[3:0];
              endcase
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              if (\$7 ) begin
                casez (next_block_replacement)
                  2'h0:
                      \$signature__addr$30  = fe_buffer_address[3:0];
                endcase
              end
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            casez (next_block_replacement)
              2'h0:
                  \$signature__addr$30  = fe_buffer_address[3:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$32  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__addr$32  = fe_buffer_address[3:0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$33  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__addr$33  = fe_buffer_address[3:0];
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
            end else begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__addr$33  = fe_buffer_address[3:0];
              endcase
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              if (\$7 ) begin
                casez (next_block_replacement)
                  2'h0:
                      /* empty */;
                  2'h1:
                      \$signature__addr$33  = fe_buffer_address[3:0];
                endcase
              end
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  \$signature__addr$33  = fe_buffer_address[3:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$34  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__addr$34  = fe_buffer_address[3:0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$35  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__addr$35  = fe_buffer_address[3:0];
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
            end else begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__addr$35  = fe_buffer_address[3:0];
              endcase
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              if (\$7 ) begin
                casez (next_block_replacement)
                  2'h0:
                      /* empty */;
                  2'h1:
                      /* empty */;
                  2'h2:
                      \$signature__addr$35  = fe_buffer_address[3:0];
                endcase
              end
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  \$signature__addr$35  = fe_buffer_address[3:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$36  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__addr$36  = fe_buffer_address[3:0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$37  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__addr$37  = fe_buffer_address[3:0];
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            if (\$3 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__addr$37  = fe_buffer_address[3:0];
              endcase
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              if (\$7 ) begin
                (* full_case = 32'd1 *)
                casez (next_block_replacement)
                  2'h0:
                      /* empty */;
                  2'h1:
                      /* empty */;
                  2'h2:
                      /* empty */;
                  2'h3:
                      \$signature__addr$37  = fe_buffer_address[3:0];
                endcase
              end
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            (* full_case = 32'd1 *)
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  /* empty */;
              2'h3:
                  \$signature__addr$37  = fe_buffer_address[3:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$38  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$signature__addr$38  = fe_buffer_address[3:0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    access_i = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            access_i = 1'h1;
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              access_i = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    set_i = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            set_i = fe_buffer_address[3:0];
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              set_i = fe_buffer_address[3:0];
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    way_i = 2'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            way_i = hit_index;
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              way_i = next_block_replacement;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$43  = 2'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    \$signature__en$43  = fe_buffer_write_strobe;
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__en$43  = 2'h3;
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  \$signature__en$43  = fe_buffer_write_strobe;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$44  = 2'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__en$44  = fe_buffer_write_strobe;
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__en$44  = 2'h3;
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  \$signature__en$44  = fe_buffer_write_strobe;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$45  = 2'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__en$45  = fe_buffer_write_strobe;
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__en$45  = 2'h3;
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  \$signature__en$45  = fe_buffer_write_strobe;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$46  = 2'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              (* full_case = 32'd1 *)
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__en$46  = fe_buffer_write_strobe;
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__en$46  = 2'h3;
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            (* full_case = 32'd1 *)
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  /* empty */;
              2'h3:
                  \$signature__en$46  = fe_buffer_write_strobe;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$47  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    \$signature__addr$47  = fe_buffer_address[3:0];
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__addr$47  = { be__address[2:0], be_read_data_word_counter };
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  \$signature__addr$47  = fe_buffer_address[3:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$48  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__addr$48  = fe_buffer_address[3:0];
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__addr$48  = { be__address[2:0], be_read_data_word_counter };
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  \$signature__addr$48  = fe_buffer_address[3:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$49  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__addr$49  = fe_buffer_address[3:0];
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__addr$49  = { be__address[2:0], be_read_data_word_counter };
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  \$signature__addr$49  = fe_buffer_address[3:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$50  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              (* full_case = 32'd1 *)
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__addr$50  = fe_buffer_address[3:0];
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__addr$50  = { be__address[2:0], be_read_data_word_counter };
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            (* full_case = 32'd1 *)
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  /* empty */;
              2'h3:
                  \$signature__addr$50  = fe_buffer_address[3:0];
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data  = 16'h0000;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    \$signature__data  = fe_buffer_write_data;
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__data  = \$11 ;
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  \$signature__data  = fe_buffer_write_data;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$52  = 16'h0000;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__data$52  = fe_buffer_write_data;
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__data$52  = \$11 ;
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  \$signature__data$52  = fe_buffer_write_data;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$53  = 16'h0000;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__data$53  = fe_buffer_write_data;
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__data$53  = \$11 ;
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  \$signature__data$53  = fe_buffer_write_data;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$54  = 16'h0000;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$2 ) begin
            if (\$3 ) begin
              (* full_case = 32'd1 *)
              casez (hit_index)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__data$54  = fe_buffer_write_data;
              endcase
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$9 ) begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__data$54  = \$11 ;
              endcase
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (\$12 ) begin
            (* full_case = 32'd1 *)
            casez (next_block_replacement)
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  /* empty */;
              2'h3:
                  \$signature__data$54  = fe_buffer_write_data;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$57  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__en$57  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$58  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__en$58  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$59  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__en$59  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$60  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__en$60  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$61  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__addr$61  = fe_buffer_address[3:0];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$62  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__addr$62  = fe_buffer_address[3:0];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$63  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__addr$63  = fe_buffer_address[3:0];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$64  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__addr$64  = fe_buffer_address[3:0];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$65  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__data$65  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$66  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__data$66  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$67  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__data$67  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$68  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__data$68  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$69  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__en$69  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$70  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__en$70  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$71  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__en$71  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__en$72  = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__en$72  = 1'h1;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$73  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__addr$73  = fe_buffer_address[3:0];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$74  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__addr$74  = fe_buffer_address[3:0];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$75  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__addr$75  = fe_buffer_address[3:0];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__addr$76  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__addr$76  = fe_buffer_address[3:0];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$77  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    \$signature__data$77  = fe_buffer_address[7:4];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$78  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    \$signature__data$78  = fe_buffer_address[7:4];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$79  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    \$signature__data$79  = fe_buffer_address[7:4];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$signature__data$80  = 4'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              (* full_case = 32'd1 *)
              casez (next_block_replacement)
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                    \$signature__data$80  = fe_buffer_address[7:4];
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    replace_i = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$5 ) begin
            end else begin
              replace_i = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    be__request_valid = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h3:
          /* empty */;
      4'h6:
          if (be__port_ready) begin
            be__request_valid = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    be__flush = 1'h0;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          be__flush = 1'h1;
      4'ha:
          if (\$16 ) begin
            be__flush = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$99  = state;
    casez (state)
      4'h0:
          if (\$17 ) begin
            \$99  = 4'h9;
          end else if (fe__request_valid) begin
            \$99  = 4'h1;
          end
      4'h1:
          \$99  = 4'h2;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$30 ) begin
            (* full_case = 32'd1 *)
            if (\$31 ) begin
              \$99  = 4'h6;
            end else begin
              \$99  = 4'h8;
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$33 ) begin
              \$99  = 4'h6;
            end else begin
              (* full_case = 32'd1 *)
              if (\$35 ) begin
                \$99  = 4'h3;
              end else begin
                \$99  = \$43 ;
              end
            end
          end
      4'h3:
          \$99  = 4'h6;
      4'h6:
          if (be__port_ready) begin
            \$99  = 4'h7;
          end
      4'h7:
          if (\$50 ) begin
            (* full_case = 32'd1 *)
            if (\$52 ) begin
              \$99  = send_mem_request_next_state;
            end else begin
              (* full_case = 32'd1 *)
              if (1'h1) begin
                \$99  = send_mem_request_next_state;
              end
            end
          end
      4'h4:
          (* full_case = 32'd1 *)
          if (\$60 ) begin
            \$99  = 4'h5;
          end else begin
            \$99  = 4'h6;
          end
      4'h5:
          (* full_case = 32'd1 *)
          if (\$62 ) begin
            \$99  = 4'h6;
          end else begin
            \$99  = 4'h8;
          end
      4'h8:
          if (\$72 ) begin
            (* full_case = 32'd1 *)
            if (fe_buffer_flush) begin
              \$99  = 4'h9;
            end else begin
              \$99  = 4'h0;
            end
          end
      4'h9:
          \$99  = 4'ha;
      4'ha:
          (* full_case = 32'd1 *)
          if (\$92 ) begin
          end else if (1'h1) begin
            \$99  = 4'h0;
          end
    endcase
    if (rst) begin
      \$99  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$100  = latency_counter;
    casez (state)
      4'h0:
          if (\$17 ) begin
          end else if (fe__request_valid) begin
            \$100  = \$18 [3:0];
          end
      4'h1:
          \$100  = \$19 [3:0];
      4'h2:
          \$100  = \$29 [3:0];
      4'h3:
          \$100  = \$44 [3:0];
      4'h6:
          if (be__port_ready) begin
            \$100  = \$48 [3:0];
          end
      4'h7:
          if (\$50 ) begin
            \$100  = \$51 [3:0];
          end
      4'h4:
          \$100  = \$55 [3:0];
      4'h5:
          \$100  = \$61 [3:0];
      4'h8:
          (* full_case = 32'd1 *)
          if (\$72 ) begin
            \$100  = 4'h0;
          end else begin
            \$100  = \$76 [3:0];
          end
      4'h9:
          /* empty */;
      4'ha:
          (* full_case = 32'd1 *)
          if (\$92 ) begin
          end else if (1'h1) begin
            \$100  = 4'h0;
          end
    endcase
    if (rst) begin
      \$100  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$101  = fe__read_data_valid;
    casez (state)
      4'h0:
          if (\$17 ) begin
          end else if (fe__request_valid) begin
            \$101  = 1'h0;
          end
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h8:
          if (\$72 ) begin
            \$101  = \$74 ;
          end
    endcase
    if (rst) begin
      \$101  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$102  = fe__flush_done;
    casez (state)
      4'h0:
          if (\$17 ) begin
          end else if (fe__request_valid) begin
            \$102  = 1'h0;
          end
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          \$102  = 1'h0;
      4'ha:
          (* full_case = 32'd1 *)
          if (\$92 ) begin
          end else if (1'h1) begin
            \$102  = 1'h1;
          end
    endcase
    if (rst) begin
      \$102  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$103  = fe_buffer_address;
    casez (state)
      4'h0:
          if (\$17 ) begin
          end else if (fe__request_valid) begin
            \$103  = fe__address;
          end
    endcase
    if (rst) begin
      \$103  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$104  = fe_buffer_write_strobe;
    casez (state)
      4'h0:
          if (\$17 ) begin
          end else if (fe__request_valid) begin
            \$104  = fe__write_strobe;
          end
    endcase
    if (rst) begin
      \$104  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$105  = fe_buffer_write_data;
    casez (state)
      4'h0:
          if (\$17 ) begin
          end else if (fe__request_valid) begin
            \$105  = fe__write_data;
          end
    endcase
    if (rst) begin
      \$105  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$106  = hit_vector;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
        begin
          \$106 [0] = \$21 ;
          \$106 [1] = \$23 ;
          \$106 [2] = \$25 ;
          \$106 [3] = \$27 ;
        end
    endcase
    if (rst) begin
      \$106  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$107  = next_block_replacement;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          \$107  = \$28 ;
    endcase
    if (rst) begin
      \$107  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$108  = be__address;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$30 ) begin
            if (\$31 ) begin
              \$108  = fe_buffer_address;
            end
          end else begin
            if (\$33 ) begin
              \$108  = fe_buffer_address;
            end
          end
      4'h3:
          \$108  = write_back_address;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          \$108  = fe_buffer_address;
      4'h5:
          if (\$62 ) begin
            \$108  = fe_buffer_address;
          end
    endcase
    if (rst) begin
      \$108  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$109  = be_buffer_write_data;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$30 ) begin
            if (\$31 ) begin
              \$109  = fe_buffer_write_data;
            end
          end else begin
            if (\$33 ) begin
              \$109  = fe_buffer_write_data;
            end
          end
      4'h3:
          \$109  = \$45 ;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          if (\$62 ) begin
            \$109  = fe_buffer_write_data;
          end
    endcase
    if (rst) begin
      \$109  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$110  = be_buffer_write_strobe;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$30 ) begin
            if (\$31 ) begin
              \$110  = fe_buffer_write_strobe;
            end
          end else begin
            if (\$33 ) begin
              \$110  = fe_buffer_write_strobe;
            end
          end
      4'h3:
          \$110  = 2'h3;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          \$110  = 2'h0;
      4'h5:
          if (\$62 ) begin
            \$110  = fe_buffer_write_strobe;
          end
    endcase
    if (rst) begin
      \$110  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$111  = send_mem_request_next_state;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$30 ) begin
            if (\$31 ) begin
              \$111  = 4'h8;
            end
          end else begin
            if (\$33 ) begin
              \$111  = 4'h8;
            end
          end
      4'h3:
          (* full_case = 32'd1 *)
          if (\$47 ) begin
            \$111  = write_back_next_state;
          end else begin
            \$111  = 4'h3;
          end
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          (* full_case = 32'd1 *)
          if (\$56 ) begin
            \$111  = 4'h5;
          end else begin
            \$111  = 4'h4;
          end
      4'h5:
          if (\$62 ) begin
            \$111  = 4'h8;
          end
    endcase
    if (rst) begin
      \$111  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$112  = read_data_mem_select;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          if (\$30 ) begin
            (* full_case = 32'd1 *)
            if (\$31 ) begin
            end else begin
              \$112  = hit_index;
            end
          end
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          (* full_case = 32'd1 *)
          if (\$62 ) begin
          end else begin
            \$112  = next_block_replacement;
          end
    endcase
    if (rst) begin
      \$112  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$113  = write_back_address;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$30 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$33 ) begin
            end else begin
              if (\$35 ) begin
                \$113  = fe_buffer_address;
              end
            end
          end
    endcase
    if (rst) begin
      \$113  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$114  = write_back_way;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$30 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$33 ) begin
            end else begin
              if (\$35 ) begin
                \$114  = next_block_replacement;
              end
            end
          end
    endcase
    if (rst) begin
      \$114  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$115  = write_back_next_state;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          (* full_case = 32'd1 *)
          if (\$30 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$33 ) begin
            end else begin
              if (\$35 ) begin
                \$115  = \$39 ;
              end
            end
          end
    endcase
    if (rst) begin
      \$115  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$116  = be_read_data_word_counter;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          if (\$50 ) begin
            (* full_case = 32'd1 *)
            if (\$52 ) begin
            end else begin
            end
          end
    endcase
    if (rst) begin
      \$116  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$117  = fe__read_data;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h8:
          if (\$72 ) begin
            \$117  = \$75 ;
          end
    endcase
    if (rst) begin
      \$117  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$118  = flush_set_index;
    if (rst) begin
      \$118  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$119  = flush_block_index;
    if (rst) begin
      \$119  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$120  = be_flush_requested;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          (* full_case = 32'd1 *)
          if (\$92 ) begin
            \$120  = 1'h1;
          end else if (1'h1) begin
            \$120  = 1'h0;
          end
    endcase
    if (rst) begin
      \$120  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$121  = fe_buffer_flush;
    casez (state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h3:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          (* full_case = 32'd1 *)
          if (\$92 ) begin
          end else if (1'h1) begin
            \$121  = 1'h0;
          end
    endcase
    if (\$97 ) begin
      \$121  = \$98 ;
    end
    if (rst) begin
      \$121  = 1'h0;
    end
  end
  assign be_buffer_address = be__address;
  assign i = hit_vector;
  assign o = hit_index;
  assign be__flush_done = 1'h1;
  assign \be_buffer_address.index  = be__address[3:0];
  assign \be_buffer_address.tag  = be__address[7:4];
  assign \fe_buffer_address.index  = fe_buffer_address[3:0];
  assign \fe_buffer_address.tag  = fe_buffer_address[7:4];
  assign \write_back_address.index  = write_back_address[3:0];
  assign \write_back_address.tag  = write_back_address[7:4];
  assign \$signature__en$113  = 1'h0;
  assign \$signature__en$112  = 1'h0;
  assign \$signature__en$111  = 1'h0;
  assign \$signature__en$110  = 1'h0;
  assign \$signature__data$109  = 1'h0;
  assign \$signature__data$108  = 1'h0;
  assign \$signature__data$107  = 1'h0;
  assign \$signature__data$106  = 1'h0;
  assign \$signature__addr$105  = 4'h0;
  assign \$signature__addr$104  = 4'h0;
  assign \$signature__addr$103  = 4'h0;
  assign \$signature__addr$102  = 4'h0;
  assign \$signature__en$96  = 1'h1;
  assign \$signature__en$95  = 1'h1;
  assign \$signature__en$94  = 1'h1;
  assign \$signature__en$93  = 1'h1;
  assign be__write_strobe = be_buffer_write_strobe;
  assign be__write_data = be_buffer_write_data;
  assign \$5  = \$4 ;
  assign \$7  = 1'h0;
  assign \$134  = 5'h00;
  assign \$11  = be__read_data;
  assign \$33  = \$32 ;
  assign \$35  = 1'h0;
  assign \$38  = \$37 ;
  assign \$42  = \$41 ;
  assign \$46  = 2'h1;
  assign \$47  = 1'h1;
  assign \$56  = 1'h1;
  assign \$58  = 1'h1;
  assign \$59  = \$57 ;
  assign \$60  = \$57 ;
  assign \$65  = \$64 ;
  assign \$70  = \$69 ;
endmodule

(* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/coding.py:46" *)
(* generator = "Amaranth" *)
module \CacheWrapper.l1_cache.hit_index_encoder (o, i);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/coding.py:41" *)
  input [3:0] i;
  wire [3:0] i;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/coding.py:43" *)
  reg n;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/coding.py:42" *)
  output [1:0] o;
  reg [1:0] o;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    o = 2'h0;
    casez (i)
      4'h1:
          o = 2'h0;
      4'h2:
          o = 2'h1;
      4'h4:
          o = 2'h2;
      4'h8:
          o = 2'h3;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    n = 1'h0;
    (* full_case = 32'd1 *)
    casez (i)
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h4:
          /* empty */;
      4'h8:
          /* empty */;
      default:
          n = 1'h1;
    endcase
  end
endmodule

(* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:35" *)
(* generator = "Amaranth" *)
module \CacheWrapper.l1_cache.replacement_policy (rst, set_i, replace_i, next_replacement_0_o, next_replacement_1_o, next_replacement_2_o, next_replacement_3_o, next_replacement_4_o, next_replacement_5_o, next_replacement_6_o, next_replacement_7_o, next_replacement_8_o, next_replacement_9_o, next_replacement_10_o, next_replacement_11_o, next_replacement_12_o, next_replacement_13_o, next_replacement_14_o, next_replacement_15_o, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  reg [1:0] \$1 ;
  reg [1:0] \$10 ;
  reg [1:0] \$11 ;
  reg [1:0] \$12 ;
  reg [1:0] \$13 ;
  reg [1:0] \$14 ;
  reg [1:0] \$15 ;
  reg [1:0] \$16 ;
  reg [1:0] \$17 ;
  reg [1:0] \$18 ;
  wire [2:0] \$2 ;
  reg [1:0] \$3 ;
  reg [1:0] \$4 ;
  reg [1:0] \$5 ;
  reg [1:0] \$6 ;
  reg [1:0] \$7 ;
  reg [1:0] \$8 ;
  reg [1:0] \$9 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$11 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$13 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$15 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$17 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$19 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$21 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$23 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$25 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$27 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$29 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$3 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$31 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$5 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$7 ;
  (* init = 2'h0 *)
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  wire [1:0] \$signal$9 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_0_o;
  reg [1:0] next_replacement_0_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_10_o;
  reg [1:0] next_replacement_10_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_11_o;
  reg [1:0] next_replacement_11_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_12_o;
  reg [1:0] next_replacement_12_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_13_o;
  reg [1:0] next_replacement_13_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_14_o;
  reg [1:0] next_replacement_14_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_15_o;
  reg [1:0] next_replacement_15_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_1_o;
  reg [1:0] next_replacement_1_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_2_o;
  reg [1:0] next_replacement_2_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_3_o;
  reg [1:0] next_replacement_3_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_4_o;
  reg [1:0] next_replacement_4_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_5_o;
  reg [1:0] next_replacement_5_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_6_o;
  reg [1:0] next_replacement_6_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_7_o;
  reg [1:0] next_replacement_7_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_8_o;
  reg [1:0] next_replacement_8_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  output [1:0] next_replacement_9_o;
  reg [1:0] next_replacement_9_o = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:21" *)
  input replace_i;
  wire replace_i;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:22" *)
  input [3:0] set_i;
  wire [3:0] set_i;
  assign \$2  = \$1  + (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ast.py:2413" *) 1'h1;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_0_o <= \$3 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_1_o <= \$4 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_2_o <= \$5 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_3_o <= \$6 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_4_o <= \$7 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_5_o <= \$8 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_6_o <= \$9 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_7_o <= \$10 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_8_o <= \$11 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_9_o <= \$12 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_10_o <= \$13 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_11_o <= \$14 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_12_o <= \$15 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_13_o <= \$16 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_14_o <= \$17 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/replacement_policy.py:40" *)
  always @(posedge clk)
    next_replacement_15_o <= \$18 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    casez (set_i)
      4'h0:
          \$1  = next_replacement_0_o;
      4'h1:
          \$1  = next_replacement_1_o;
      4'h2:
          \$1  = next_replacement_2_o;
      4'h3:
          \$1  = next_replacement_3_o;
      4'h4:
          \$1  = next_replacement_4_o;
      4'h5:
          \$1  = next_replacement_5_o;
      4'h6:
          \$1  = next_replacement_6_o;
      4'h7:
          \$1  = next_replacement_7_o;
      4'h8:
          \$1  = next_replacement_8_o;
      4'h9:
          \$1  = next_replacement_9_o;
      4'ha:
          \$1  = next_replacement_10_o;
      4'hb:
          \$1  = next_replacement_11_o;
      4'hc:
          \$1  = next_replacement_12_o;
      4'hd:
          \$1  = next_replacement_13_o;
      4'he:
          \$1  = next_replacement_14_o;
      4'hf:
          \$1  = next_replacement_15_o;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$3  = next_replacement_0_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            \$3  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$3  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$4  = next_replacement_1_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            \$4  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$4  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$5  = next_replacement_2_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            \$5  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$5  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$6  = next_replacement_3_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            \$6  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$6  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$7  = next_replacement_4_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            \$7  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$7  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$8  = next_replacement_5_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            \$8  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$8  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$9  = next_replacement_6_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            \$9  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$9  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$10  = next_replacement_7_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            \$10  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$10  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$11  = next_replacement_8_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            \$11  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$11  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$12  = next_replacement_9_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            \$12  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$12  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$13  = next_replacement_10_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            \$13  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$13  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$14  = next_replacement_11_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            \$14  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$14  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$15  = next_replacement_12_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            /* empty */;
        4'hc:
            \$15  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$15  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$16  = next_replacement_13_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            /* empty */;
        4'hc:
            /* empty */;
        4'hd:
            \$16  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$16  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$17  = next_replacement_14_o;
    if (replace_i) begin
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            /* empty */;
        4'hc:
            /* empty */;
        4'hd:
            /* empty */;
        4'he:
            \$17  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$17  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$18  = next_replacement_15_o;
    if (replace_i) begin
      (* full_case = 32'd1 *)
      casez (set_i)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            /* empty */;
        4'hc:
            /* empty */;
        4'hd:
            /* empty */;
        4'he:
            /* empty */;
        4'hf:
            \$18  = \$2 [1:0];
      endcase
    end
    if (rst) begin
      \$18  = 2'h0;
    end
  end
  assign \$signal  = next_replacement_0_o;
  assign \$signal$3  = next_replacement_1_o;
  assign \$signal$5  = next_replacement_2_o;
  assign \$signal$7  = next_replacement_3_o;
  assign \$signal$9  = next_replacement_4_o;
  assign \$signal$11  = next_replacement_5_o;
  assign \$signal$13  = next_replacement_6_o;
  assign \$signal$15  = next_replacement_7_o;
  assign \$signal$17  = next_replacement_8_o;
  assign \$signal$19  = next_replacement_9_o;
  assign \$signal$21  = next_replacement_10_o;
  assign \$signal$23  = next_replacement_11_o;
  assign \$signal$25  = next_replacement_12_o;
  assign \$signal$27  = next_replacement_13_o;
  assign \$signal$29  = next_replacement_14_o;
  assign \$signal$31  = next_replacement_15_o;
endmodule

(* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:27" *)
(* generator = "Amaranth" *)
module \CacheWrapper.main_memory (rst, fe__port_ready, fe__read_data, write_port__data, fe__write_strobe, fe__request_valid, fe__address, fe__read_data_valid, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$4  = 0;
  wire [8:0] \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire [4:0] \$19 ;
  wire \$2 ;
  reg \$20 ;
  reg \$21 ;
  reg \$22 ;
  reg [3:0] \$23 ;
  reg [1:0] \$24 ;
  reg \$25 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [4:0] \$8 ;
  wire \$9 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:41" *)
  wire [7:0] aligned_address;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:12" *)
  input [7:0] fe__address;
  wire [7:0] fe__address;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:20" *)
  wire fe__flush_done;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:18" *)
  output fe__port_ready;
  wire fe__port_ready;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  output [15:0] fe__read_data;
  wire [15:0] fe__read_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  output fe__read_data_valid;
  reg fe__read_data_valid = 1'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:15" *)
  input fe__request_valid;
  wire fe__request_valid;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:13" *)
  wire [15:0] fe__write_data;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:14" *)
  input [1:0] fe__write_strobe;
  wire [1:0] fe__write_strobe;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:37" *)
  reg [3:0] latency_counter = 4'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:30" *)
  reg processing_request = 1'h0;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:240" *)
  wire [7:0] read_port__addr;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:241" *)
  wire [15:0] read_port__data;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  reg read_port__en = 1'h1;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:35" *)
  reg request_type = 1'h0;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:401" *)
  wire [7:0] write_port__addr;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:13" *)
  input [15:0] write_port__data;
  wire [15:0] write_port__data;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  reg [1:0] write_port__en = 2'h0;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:47" *)
  reg [15:0] data_memory [255:0];
  initial begin
    data_memory[0] = 16'h0000;
    data_memory[1] = 16'h0000;
    data_memory[2] = 16'h0000;
    data_memory[3] = 16'h0000;
    data_memory[4] = 16'h0000;
    data_memory[5] = 16'h0000;
    data_memory[6] = 16'h0000;
    data_memory[7] = 16'h0000;
    data_memory[8] = 16'h0000;
    data_memory[9] = 16'h0000;
    data_memory[10] = 16'h0000;
    data_memory[11] = 16'h0000;
    data_memory[12] = 16'h0000;
    data_memory[13] = 16'h0000;
    data_memory[14] = 16'h0000;
    data_memory[15] = 16'h0000;
    data_memory[16] = 16'h0000;
    data_memory[17] = 16'h0000;
    data_memory[18] = 16'h0000;
    data_memory[19] = 16'h0000;
    data_memory[20] = 16'h0000;
    data_memory[21] = 16'h0000;
    data_memory[22] = 16'h0000;
    data_memory[23] = 16'h0000;
    data_memory[24] = 16'h0000;
    data_memory[25] = 16'h0000;
    data_memory[26] = 16'h0000;
    data_memory[27] = 16'h0000;
    data_memory[28] = 16'h0000;
    data_memory[29] = 16'h0000;
    data_memory[30] = 16'h0000;
    data_memory[31] = 16'h0000;
    data_memory[32] = 16'h0000;
    data_memory[33] = 16'h0000;
    data_memory[34] = 16'h0000;
    data_memory[35] = 16'h0000;
    data_memory[36] = 16'h0000;
    data_memory[37] = 16'h0000;
    data_memory[38] = 16'h0000;
    data_memory[39] = 16'h0000;
    data_memory[40] = 16'h0000;
    data_memory[41] = 16'h0000;
    data_memory[42] = 16'h0000;
    data_memory[43] = 16'h0000;
    data_memory[44] = 16'h0000;
    data_memory[45] = 16'h0000;
    data_memory[46] = 16'h0000;
    data_memory[47] = 16'h0000;
    data_memory[48] = 16'h0000;
    data_memory[49] = 16'h0000;
    data_memory[50] = 16'h0000;
    data_memory[51] = 16'h0000;
    data_memory[52] = 16'h0000;
    data_memory[53] = 16'h0000;
    data_memory[54] = 16'h0000;
    data_memory[55] = 16'h0000;
    data_memory[56] = 16'h0000;
    data_memory[57] = 16'h0000;
    data_memory[58] = 16'h0000;
    data_memory[59] = 16'h0000;
    data_memory[60] = 16'h0000;
    data_memory[61] = 16'h0000;
    data_memory[62] = 16'h0000;
    data_memory[63] = 16'h0000;
    data_memory[64] = 16'h0000;
    data_memory[65] = 16'h0000;
    data_memory[66] = 16'h0000;
    data_memory[67] = 16'h0000;
    data_memory[68] = 16'h0000;
    data_memory[69] = 16'h0000;
    data_memory[70] = 16'h0000;
    data_memory[71] = 16'h0000;
    data_memory[72] = 16'h0000;
    data_memory[73] = 16'h0000;
    data_memory[74] = 16'h0000;
    data_memory[75] = 16'h0000;
    data_memory[76] = 16'h0000;
    data_memory[77] = 16'h0000;
    data_memory[78] = 16'h0000;
    data_memory[79] = 16'h0000;
    data_memory[80] = 16'h0000;
    data_memory[81] = 16'h0000;
    data_memory[82] = 16'h0000;
    data_memory[83] = 16'h0000;
    data_memory[84] = 16'h0000;
    data_memory[85] = 16'h0000;
    data_memory[86] = 16'h0000;
    data_memory[87] = 16'h0000;
    data_memory[88] = 16'h0000;
    data_memory[89] = 16'h0000;
    data_memory[90] = 16'h0000;
    data_memory[91] = 16'h0000;
    data_memory[92] = 16'h0000;
    data_memory[93] = 16'h0000;
    data_memory[94] = 16'h0000;
    data_memory[95] = 16'h0000;
    data_memory[96] = 16'h0000;
    data_memory[97] = 16'h0000;
    data_memory[98] = 16'h0000;
    data_memory[99] = 16'h0000;
    data_memory[100] = 16'h0000;
    data_memory[101] = 16'h0000;
    data_memory[102] = 16'h0000;
    data_memory[103] = 16'h0000;
    data_memory[104] = 16'h0000;
    data_memory[105] = 16'h0000;
    data_memory[106] = 16'h0000;
    data_memory[107] = 16'h0000;
    data_memory[108] = 16'h0000;
    data_memory[109] = 16'h0000;
    data_memory[110] = 16'h0000;
    data_memory[111] = 16'h0000;
    data_memory[112] = 16'h0000;
    data_memory[113] = 16'h0000;
    data_memory[114] = 16'h0000;
    data_memory[115] = 16'h0000;
    data_memory[116] = 16'h0000;
    data_memory[117] = 16'h0000;
    data_memory[118] = 16'h0000;
    data_memory[119] = 16'h0000;
    data_memory[120] = 16'h0000;
    data_memory[121] = 16'h0000;
    data_memory[122] = 16'h0000;
    data_memory[123] = 16'h0000;
    data_memory[124] = 16'h0000;
    data_memory[125] = 16'h0000;
    data_memory[126] = 16'h0000;
    data_memory[127] = 16'h0000;
    data_memory[128] = 16'h0000;
    data_memory[129] = 16'h0000;
    data_memory[130] = 16'h0000;
    data_memory[131] = 16'h0000;
    data_memory[132] = 16'h0000;
    data_memory[133] = 16'h0000;
    data_memory[134] = 16'h0000;
    data_memory[135] = 16'h0000;
    data_memory[136] = 16'h0000;
    data_memory[137] = 16'h0000;
    data_memory[138] = 16'h0000;
    data_memory[139] = 16'h0000;
    data_memory[140] = 16'h0000;
    data_memory[141] = 16'h0000;
    data_memory[142] = 16'h0000;
    data_memory[143] = 16'h0000;
    data_memory[144] = 16'h0000;
    data_memory[145] = 16'h0000;
    data_memory[146] = 16'h0000;
    data_memory[147] = 16'h0000;
    data_memory[148] = 16'h0000;
    data_memory[149] = 16'h0000;
    data_memory[150] = 16'h0000;
    data_memory[151] = 16'h0000;
    data_memory[152] = 16'h0000;
    data_memory[153] = 16'h0000;
    data_memory[154] = 16'h0000;
    data_memory[155] = 16'h0000;
    data_memory[156] = 16'h0000;
    data_memory[157] = 16'h0000;
    data_memory[158] = 16'h0000;
    data_memory[159] = 16'h0000;
    data_memory[160] = 16'h0000;
    data_memory[161] = 16'h0000;
    data_memory[162] = 16'h0000;
    data_memory[163] = 16'h0000;
    data_memory[164] = 16'h0000;
    data_memory[165] = 16'h0000;
    data_memory[166] = 16'h0000;
    data_memory[167] = 16'h0000;
    data_memory[168] = 16'h0000;
    data_memory[169] = 16'h0000;
    data_memory[170] = 16'h0000;
    data_memory[171] = 16'h0000;
    data_memory[172] = 16'h0000;
    data_memory[173] = 16'h0000;
    data_memory[174] = 16'h0000;
    data_memory[175] = 16'h0000;
    data_memory[176] = 16'h0000;
    data_memory[177] = 16'h0000;
    data_memory[178] = 16'h0000;
    data_memory[179] = 16'h0000;
    data_memory[180] = 16'h0000;
    data_memory[181] = 16'h0000;
    data_memory[182] = 16'h0000;
    data_memory[183] = 16'h0000;
    data_memory[184] = 16'h0000;
    data_memory[185] = 16'h0000;
    data_memory[186] = 16'h0000;
    data_memory[187] = 16'h0000;
    data_memory[188] = 16'h0000;
    data_memory[189] = 16'h0000;
    data_memory[190] = 16'h0000;
    data_memory[191] = 16'h0000;
    data_memory[192] = 16'h0000;
    data_memory[193] = 16'h0000;
    data_memory[194] = 16'h0000;
    data_memory[195] = 16'h0000;
    data_memory[196] = 16'h0000;
    data_memory[197] = 16'h0000;
    data_memory[198] = 16'h0000;
    data_memory[199] = 16'h0000;
    data_memory[200] = 16'h0000;
    data_memory[201] = 16'h0000;
    data_memory[202] = 16'h0000;
    data_memory[203] = 16'h0000;
    data_memory[204] = 16'h0000;
    data_memory[205] = 16'h0000;
    data_memory[206] = 16'h0000;
    data_memory[207] = 16'h0000;
    data_memory[208] = 16'h0000;
    data_memory[209] = 16'h0000;
    data_memory[210] = 16'h0000;
    data_memory[211] = 16'h0000;
    data_memory[212] = 16'h0000;
    data_memory[213] = 16'h0000;
    data_memory[214] = 16'h0000;
    data_memory[215] = 16'h0000;
    data_memory[216] = 16'h0000;
    data_memory[217] = 16'h0000;
    data_memory[218] = 16'h0000;
    data_memory[219] = 16'h0000;
    data_memory[220] = 16'h0000;
    data_memory[221] = 16'h0000;
    data_memory[222] = 16'h0000;
    data_memory[223] = 16'h0000;
    data_memory[224] = 16'h0000;
    data_memory[225] = 16'h0000;
    data_memory[226] = 16'h0000;
    data_memory[227] = 16'h0000;
    data_memory[228] = 16'h0000;
    data_memory[229] = 16'h0000;
    data_memory[230] = 16'h0000;
    data_memory[231] = 16'h0000;
    data_memory[232] = 16'h0000;
    data_memory[233] = 16'h0000;
    data_memory[234] = 16'h0000;
    data_memory[235] = 16'h0000;
    data_memory[236] = 16'h0000;
    data_memory[237] = 16'h0000;
    data_memory[238] = 16'h0000;
    data_memory[239] = 16'h0000;
    data_memory[240] = 16'h0000;
    data_memory[241] = 16'h0000;
    data_memory[242] = 16'h0000;
    data_memory[243] = 16'h0000;
    data_memory[244] = 16'h0000;
    data_memory[245] = 16'h0000;
    data_memory[246] = 16'h0000;
    data_memory[247] = 16'h0000;
    data_memory[248] = 16'h0000;
    data_memory[249] = 16'h0000;
    data_memory[250] = 16'h0000;
    data_memory[251] = 16'h0000;
    data_memory[252] = 16'h0000;
    data_memory[253] = 16'h0000;
    data_memory[254] = 16'h0000;
    data_memory[255] = 16'h0000;
  end
  always @(posedge clk) begin
    if (write_port__en[0])
      data_memory[\$1 [7:0]][7:0] <= write_port__data[7:0];
    if (write_port__en[1])
      data_memory[\$1 [7:0]][15:8] <= write_port__data[15:8];
  end
  reg [15:0] _0_;
  always @(posedge clk) begin
    if (read_port__en) begin
      _0_ <= data_memory[\$1 [7:0]];
    end
  end
  assign fe__read_data = _0_;
  assign fe__port_ready = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:31" *) processing_request;
  assign \$1  = fe__address - (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:44" *) 1'h0;
  assign \$2  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:61" *) processing_request;
  assign \$3  = fe__address >= (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:64" *) 1'h0;
  assign \$4  = fe__request_valid & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:63" *) \$3 ;
  assign \$5  = fe__address < (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:65" *) 9'h100;
  assign \$6  = \$4  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:63" *) \$5 ;
  assign \$7  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:69" *) fe__write_strobe;
  assign \$8  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:75" *) 1'h1;
  assign \$9  = | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:79" *) fe__write_strobe;
  assign \$10  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:79" *) \$9 ;
  assign \$11  = ! (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:86" *) request_type;
  assign \$12  = latency_counter == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:87" *) 4'h9;
  assign \$13  = \$11  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:86" *) \$12 ;
  assign \$15  = latency_counter == (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:91" *) 4'he;
  assign \$16  = \$14  & (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:90" *) \$15 ;
  assign \$17  = \$13  | (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:85" *) \$16 ;
  assign \$18  = ~ (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:98" *) request_type;
  assign \$19  = latency_counter + (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:100" *) 1'h1;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:30" *)
  always @(posedge clk)
    processing_request <= \$20 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:35" *)
  always @(posedge clk)
    request_type <= \$21 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/memory_bus.py:17" *)
  always @(posedge clk)
    fe__read_data_valid <= \$22 ;
  (* src = "/home/richard/Development/pycachegen/src/pycachegen/amaranth/main_memory.py:37" *)
  always @(posedge clk)
    latency_counter <= \$23 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:400" *)
  always @(posedge clk)
    write_port__en <= \$24 ;
  (* src = "/home/richard/Development/pycachegen/.venv/lib/python3.10/site-packages/amaranth/lib/memory.py:239" *)
  always @(posedge clk)
    read_port__en <= \$25 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$20  = processing_request;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$20  = 1'h1;
      end
    end else begin
      if (\$17 ) begin
        \$20  = 1'h0;
      end
    end
    if (rst) begin
      \$20  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$21  = request_type;
    if (\$2 ) begin
      if (\$6 ) begin
        \$21  = \$7 ;
      end
    end
    if (rst) begin
      \$21  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$22  = fe__read_data_valid;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$22  = 1'h0;
      end
    end else begin
      if (\$17 ) begin
        \$22  = \$18 ;
      end
    end
    if (rst) begin
      \$22  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$23  = latency_counter;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$23  = \$8 [3:0];
      end
    end else begin
      (* full_case = 32'd1 *)
      if (\$17 ) begin
        \$23  = 4'h0;
      end else begin
        \$23  = \$19 [3:0];
      end
    end
    if (rst) begin
      \$23  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$24  = write_port__en;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$24  = fe__write_strobe;
      end
    end else begin
      \$24  = 2'h0;
    end
    if (rst) begin
      \$24  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$25  = read_port__en;
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      if (\$6 ) begin
        \$25  = \$10 ;
      end
    end else begin
      \$25  = 1'h0;
    end
    if (rst) begin
      \$25  = 1'h1;
    end
  end
  assign fe__flush_done = 1'h1;
  assign aligned_address = \$1 [7:0];
  assign write_port__addr = \$1 [7:0];
  assign fe__write_data = write_port__data;
  assign read_port__addr = \$1 [7:0];
  assign read_port__data = fe__read_data;
  assign \$14  = request_type;
endmodule
